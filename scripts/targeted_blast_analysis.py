#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Targeted BLAST Open London 2025 Analysis
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û - ‡πÑ‡∏°‡πà scrape ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
"""

import sys
import os
import json
import asyncio
from datetime import datetime
from typing import Dict, List, Optional

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import only what exists
try:
    from app.scrapers.enhanced_hltv_scraper import EnhancedHLTVScraper
except ImportError:
    EnhancedHLTVScraper = None

try:
    from core.enhanced_team_analyzer import EnhancedTeamAnalyzer
except ImportError:
    EnhancedTeamAnalyzer = None

# Fix Windows console encoding
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())

class TargetedBlastAnalyzer:
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å BLAST Open London 2025"""
    
    def __init__(self):
        self.scraper = EnhancedHLTVScraper() if EnhancedHLTVScraper else None
        self.team_analyzer = EnhancedTeamAnalyzer() if EnhancedTeamAnalyzer else None
        
        # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        self.target_matches = [
            {
                "team1": "Vitality",
                "team2": "M80",
                "time": "LIVE",
                "odds": {"team1": 1.16, "team2": 4.90},
                "status": "live"
            },
            {
                "team1": "GamerLegion", 
                "team2": "Virtus.pro",
                "time": "19:30",
                "odds": {"team1": 2.07, "team2": 1.78},
                "status": "upcoming"
            },
            {
                "team1": "FaZe",
                "team2": "ECSTATIC", 
                "time": "22:00",
                "odds": {"team1": 1.33, "team2": 3.29},
                "status": "upcoming"
            },
            {
                "team1": "Natus Vincere",
                "team2": "fnatic",
                "time": "00:30",
                "odds": {"team1": 1.27, "team2": 3.69},
                "status": "upcoming"
            }
        ]
    
    async def get_team_data_efficiently(self, team_name: str) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
        try:
            print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {team_name}...")
            
            # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß
            team_data = {
                "name": team_name,
                "ranking": self._get_team_ranking(team_name),
                "recent_form": [],
                "players": [],
                "map_pool": {}
            }
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ scraper ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°
            if self.scraper:
                try:
                    scraped_data = await self.scraper.get_team_info(team_name)
                    if scraped_data:
                        team_data.update(scraped_data)
                except:
                    pass  # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            
            return team_data
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {team_name}: {e}")
            return {
                "name": team_name,
                "ranking": "N/A", 
                "recent_form": [],
                "players": [],
                "map_pool": {}
            }
    
    def _get_team_ranking(self, team_name: str) -> str:
        """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å"""
        rankings = {
            "Vitality": "#6",
            "M80": "#25", 
            "GamerLegion": "#16",
            "Virtus.pro": "#15",
            "FaZe": "#9",
            "ECSTATIC": "#36",
            "Natus Vincere": "#6",
            "fnatic": "#34"
        }
        return rankings.get(team_name, "N/A")
    
    def analyze_match_efficiently(self, match: Dict, team1_data: Dict, team2_data: Dict) -> Dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏∏‡∏î"""
        
        analysis = {
            "match_info": {
                "teams": f"{match['team1']} vs {match['team2']}",
                "time": match['time'],
                "status": match['status'],
                "tournament": "BLAST Open London 2025"
            },
            "odds_analysis": {
                "favorite": match['team1'] if match['odds']['team1'] < match['odds']['team2'] else match['team2'],
                "underdog": match['team2'] if match['odds']['team1'] < match['odds']['team2'] else match['team1'],
                "odds": match['odds'],
                "implied_probability": {
                    match['team1']: round(1/match['odds']['team1'] * 100, 1),
                    match['team2']: round(1/match['odds']['team2'] * 100, 1)
                }
            },
            "quick_assessment": self._get_quick_assessment(match, team1_data, team2_data),
            "betting_recommendation": self._get_betting_recommendation(match)
        }
        
        return analysis
    
    def _get_quick_assessment(self, match: Dict, team1_data: Dict, team2_data: Dict) -> Dict:
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß"""
        
        # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ
        team1_rank = team1_data.get('ranking', 'N/A')
        team2_rank = team2_data.get('ranking', 'N/A')
        
        assessment = {
            "team1_strengths": self._get_team_strengths(match['team1']),
            "team2_strengths": self._get_team_strengths(match['team2']),
            "key_factors": self._get_key_factors(match),
            "prediction_confidence": self._get_confidence_level(match)
        }
        
        return assessment
    
    def _get_team_strengths(self, team_name: str) -> List[str]:
        """‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å"""
        strengths_db = {
            "Vitality": ["ZywOo superstar", "Strong T-side", "Experience"],
            "M80": ["Upset potential", "Young talent", "Aggressive style"],
            "GamerLegion": ["REZ leadership", "Tactical discipline", "Map pool depth"],
            "Virtus.pro": ["electroNic skill", "CIS aggression", "Clutch ability"],
            "FaZe": ["Individual skill", "Firepower", "International experience"],
            "ECSTATIC": ["Team chemistry", "Tactical innovation", "Underdog motivation"],
            "Natus Vincere": ["s1mple factor", "Tournament experience", "Strategic depth"],
            "fnatic": ["Swedish CS legacy", "Tactical flexibility", "LAN experience"]
        }
        return strengths_db.get(team_name, ["Standard CS fundamentals"])
    
    def _get_key_factors(self, match: Dict) -> List[str]:
        """‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå"""
        factors = []
        
        if match['status'] == 'live':
            factors.append("üî¥ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Ç‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå odds
        odds_diff = abs(match['odds']['team1'] - match['odds']['team2'])
        if odds_diff > 2.0:
            factors.append("üìä ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å - ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏≠‡∏±‡∏õ‡πÄ‡∏ã‡πá‡∏ï")
        elif odds_diff < 0.5:
            factors.append("‚öñÔ∏è ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô - ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤‡∏¢‡∏≤‡∏Å")
        
        # ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Ç‡πà‡∏á
        if match['time'] in ['22:00', '00:30']:
            factors.append("üåô ‡πÅ‡∏Ç‡πà‡∏á‡∏î‡∏∂‡∏Å - ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏ü‡∏≠‡∏£‡πå‡∏°")
            
        return factors
    
    def _get_confidence_level(self, match: Dict) -> str:
        """‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"""
        odds_diff = abs(match['odds']['team1'] - match['odds']['team2'])
        
        if odds_diff > 2.5:
            return "üü¢ ‡∏™‡∏π‡∏á - ‡πÄ‡∏ï‡πá‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"
        elif odds_diff > 1.0:
            return "üü° ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡∏°‡∏µ‡πÄ‡∏ï‡πá‡∏á‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô"
        else:
            return "üî¥ ‡∏ï‡πà‡∏≥ - ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å"
    
    def _get_betting_recommendation(self, match: Dict) -> Dict:
        """‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô"""
        
        favorite = match['team1'] if match['odds']['team1'] < match['odds']['team2'] else match['team2']
        underdog = match['team2'] if match['odds']['team1'] < match['odds']['team2'] else match['team1']
        
        fav_odds = min(match['odds']['team1'], match['odds']['team2'])
        dog_odds = max(match['odds']['team1'], match['odds']['team2'])
        
        recommendation = {
            "primary_bet": "",
            "alternative_bet": "",
            "stake_suggestion": "",
            "risk_level": ""
        }
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏° odds
        if fav_odds < 1.4:  # ‡πÄ‡∏ï‡πá‡∏á‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å
            recommendation["primary_bet"] = f"üéØ {favorite} ML (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡πÅ‡∏ï‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)"
            recommendation["alternative_bet"] = f"üí∞ {underdog} +1.5 Maps (value bet)"
            recommendation["stake_suggestion"] = "‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
            recommendation["risk_level"] = "üü¢ ‡∏ï‡πà‡∏≥"
            
        elif fav_odds < 1.8:  # ‡πÄ‡∏ï‡πá‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            recommendation["primary_bet"] = f"‚öñÔ∏è {favorite} ML ‡∏´‡∏£‡∏∑‡∏≠ Handicap"
            recommendation["alternative_bet"] = f"üé≤ Over 2.5 Maps"
            recommendation["stake_suggestion"] = "‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
            recommendation["risk_level"] = "üü° ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
            
        else:  # ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô
            recommendation["primary_bet"] = f"üé∞ {underdog} ML (value bet)"
            recommendation["alternative_bet"] = f"üìä Over 2.5 Maps"
            recommendation["stake_suggestion"] = "‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ô‡πâ‡∏≠‡∏¢"
            recommendation["risk_level"] = "üî¥ ‡∏™‡∏π‡∏á"
        
        return recommendation
    
    async def run_targeted_analysis(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        
        print("=" * 80)
        print("üéØ BLAST Open London 2025 - ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏∏‡∏î")
        print("=" * 80)
        print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {len(self.target_matches)} ‡∏Ñ‡∏π‡πà")
        print()
        
        all_analyses = []
        
        for i, match in enumerate(self.target_matches, 1):
            print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà {i}: {match['team1']} vs {match['team2']}")
            print("-" * 60)
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î
            team1_data = await self.get_team_data_efficiently(match['team1'])
            team2_data = await self.get_team_data_efficiently(match['team2'])
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏ï‡∏ä‡πå
            analysis = self.analyze_match_efficiently(match, team1_data, team2_data)
            all_analyses.append(analysis)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            self.display_match_analysis(analysis)
            print()
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°
        self.display_summary(all_analyses)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        await self.save_analysis_results(all_analyses)
        
        return all_analyses
    
    def display_match_analysis(self, analysis: Dict):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏ï‡∏ä‡πå"""
        
        match_info = analysis['match_info']
        odds_info = analysis['odds_analysis']
        assessment = analysis['quick_assessment']
        betting = analysis['betting_recommendation']
        
        print(f"üèÜ {match_info['teams']}")
        print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {match_info['time']} | ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {match_info['status']}")
        print(f"üé≤ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á: {odds_info['odds']}")
        print(f"üìä ‡πÄ‡∏ï‡πá‡∏á: {odds_info['favorite']} | ‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡πá‡∏≠‡∏Å: {odds_info['underdog']}")
        print()
        
        print("üí™ ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏ó‡∏µ‡∏°:")
        print(f"  ‚Ä¢ {match_info['teams'].split(' vs ')[0]}: {', '.join(assessment['team1_strengths'])}")
        print(f"  ‚Ä¢ {match_info['teams'].split(' vs ')[1]}: {', '.join(assessment['team2_strengths'])}")
        print()
        
        print("üîë ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:")
        for factor in assessment['key_factors']:
            print(f"  ‚Ä¢ {factor}")
        print()
        
        print(f"üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {assessment['prediction_confidence']}")
        print()
        
        print("üí∞ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô:")
        print(f"  ü•á ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: {betting['primary_bet']}")
        print(f"  ü•à ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á: {betting['alternative_bet']}")
        print(f"  üíµ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô: {betting['stake_suggestion']}")
        print(f"  ‚ö†Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {betting['risk_level']}")
    
    def display_summary(self, analyses: List[Dict]):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        
        print("=" * 80)
        print("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå BLAST Open London 2025")
        print("=" * 80)
        
        print("üéØ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
        
        # ‡∏´‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ value ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        best_value = None
        highest_risk = None
        safest_bet = None
        
        for analysis in analyses:
            betting = analysis['betting_recommendation']
            
            if "value bet" in betting['primary_bet'].lower():
                best_value = analysis
            
            if betting['risk_level'] == "üî¥ ‡∏™‡∏π‡∏á":
                highest_risk = analysis
            elif betting['risk_level'] == "üü¢ ‡∏ï‡πà‡∏≥":
                safest_bet = analysis
        
        if best_value:
            print(f"üíé Value Bet: {best_value['match_info']['teams']}")
        
        if safest_bet:
            print(f"üõ°Ô∏è ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: {safest_bet['match_info']['teams']}")
        
        if highest_risk:
            print(f"üé∞ High Risk/High Reward: {highest_risk['match_info']['teams']}")
        
        print()
        print("‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö")
        print("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô")
    
    async def save_analysis_results(self, analyses: List[Dict]):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"data/targeted_blast_analysis_{timestamp}.json"
        
        try:
            os.makedirs("data", exist_ok=True)
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump({
                    "timestamp": timestamp,
                    "tournament": "BLAST Open London 2025",
                    "analysis_type": "targeted_matches",
                    "matches_analyzed": len(analyses),
                    "analyses": analyses
                }, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà: {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: {e}")

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    try:
        analyzer = TargetedBlastAnalyzer()
        await analyzer.run_targeted_analysis()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
