#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Update Ancient Result and Learn from Mistake
‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏• Ancient ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
"""

import json
import sys
import os
from datetime import datetime

# Add core to path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'core'))
from prediction_tracker import update_match_result, PredictionTracker

# Windows console encoding fix
if sys.platform.startswith('win'):
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())

def update_ancient_prediction():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Ancient"""
    
    print("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ VP vs GL Ancient")
    print("="*60)
    print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%H:%M:%S')}")
    print()
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ prediction ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ancient
    tracker = PredictionTracker()
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡πÅ‡∏°‡∏û Ancient
    # ‡πÉ‡∏ä‡πâ prediction ID ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    ancient_prediction_id = "VP_vs_GL_-_Map_2_Ancient_20250827_210604"  # ‡∏à‡∏≤‡∏Å analysis_integration
    
    lessons_learned = [
        "GL momentum ‡∏à‡∏≤‡∏Å Map 1 ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏≤‡∏î",
        "VP CT side ‡∏ö‡∏ô Ancient ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏î", 
        "GL ‡∏°‡∏µ anti-strat ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö VP",
        "Momentum factor ‡∏°‡∏µ‡∏ú‡∏•‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ win rate",
        "VP ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏û‡πâ Map 1",
        "GL confidence ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏ô‡∏∞ Dust2",
        "‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å psychological factor ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"
    ]
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏• (GL ‡∏ä‡∏ô‡∏∞, VP ‡πÅ‡∏û‡πâ = -100 ‡∏ö‡∏≤‡∏ó)
    update_match_result(ancient_prediction_id, "GamerLegion", -100.0)
    
    print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    print(f"üìä ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á: GamerLegion ‡∏ä‡∏ô‡∏∞ 13-9")
    print(f"üí∞ ‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: -100 ‡∏ö‡∏≤‡∏ó")
    print()

def analyze_prediction_failure():
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏¥‡∏î"""
    
    print("üîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏¥‡∏î:")
    print("="*60)
    
    print("‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î:")
    print("   üó∫Ô∏è ‡πÅ‡∏°‡∏û: Ancient")
    print("   üìä ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: VP ‡∏ä‡∏ô‡∏∞ (Edge 26%, Confidence 71%)")
    print("   üìà ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á: GL ‡∏ä‡∏ô‡∏∞ 13-9")
    print("   üí∏ ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: -100 ‡∏ö‡∏≤‡∏ó")
    print()
    
    print("üß† ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏¥‡∏î:")
    print("   1. üìä Overweight ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Win Rate")
    print("      ‚Ä¢ VP 71% vs GL 45% ‡∏ö‡∏ô Ancient")
    print("      ‚Ä¢ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
    print()
    print("   2. üé≠ Underweight Momentum Factor")
    print("      ‚Ä¢ GL ‡∏ä‡∏ô‡∏∞ Map 1 ‡πÑ‡∏î‡πâ confidence boost")
    print("      ‚Ä¢ VP ‡πÅ‡∏û‡πâ Map 1 ‡∏≠‡∏≤‡∏à‡∏°‡∏µ mental impact")
    print("      ‚Ä¢ Psychological pressure ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏¥‡∏î‡∏°‡∏≤‡∏Å‡∏û‡∏≠")
    print()
    print("   3. üéØ Ignore Anti-Strat Possibility")
    print("      ‚Ä¢ GL ‡∏≠‡∏≤‡∏à‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° counter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö VP")
    print("      ‚Ä¢ VP split execute ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å read")
    print("      ‚Ä¢ GL ‡∏°‡∏µ preparation ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏≤‡∏î")
    print()
    print("   4. ‚è∞ Live Context Missing")
    print("      ‚Ä¢ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏î‡∏π individual performance")
    print("      ‚Ä¢ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° economy state")
    print("      ‚Ä¢ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå in-game momentum")
    print()

def update_learning_model():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ"""
    
    print("üìö ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ:")
    print("="*60)
    
    print("üîß ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥:")
    print("   1. üìä ‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Historical Win Rate")
    print("      ‚Ä¢ ‡∏à‡∏≤‡∏Å 30% ‡πÄ‡∏õ‡πá‡∏ô 20%")
    print("      ‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Recent Form ‡πÅ‡∏•‡∏∞ Momentum")
    print()
    print("   2. üé≠ ‡πÄ‡∏û‡∏¥‡πà‡∏° Momentum Factor")
    print("      ‚Ä¢ Map-to-map momentum: +15% weight")
    print("      ‚Ä¢ Psychological impact: +10% weight")
    print("      ‚Ä¢ Confidence boost/drop: +10% weight")
    print()
    print("   3. üéØ Anti-Strat Consideration")
    print("      ‚Ä¢ ‡∏ñ‡πâ‡∏≤‡∏ó‡∏µ‡∏°‡πÅ‡∏û‡πâ map ‡πÅ‡∏£‡∏Å ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ñ‡∏π‡∏Å counter")
    print("      ‚Ä¢ ‡∏ñ‡πâ‡∏≤‡∏ó‡∏µ‡∏°‡∏ä‡∏ô‡∏∞ map ‡πÅ‡∏£‡∏Å ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏° confidence")
    print("      ‚Ä¢ Team preparation factor: +5% weight")
    print()
    print("   4. ‚è∞ Live Data Integration")
    print("      ‚Ä¢ Individual player performance")
    print("      ‚Ä¢ Economy state tracking")
    print("      ‚Ä¢ In-game momentum shifts")
    print()

def generate_improved_predictions():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
    
    print("üöÄ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß:")
    print("="*60)
    
    print("üó∫Ô∏è ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Map 3 Train (‡∏´‡∏≤‡∏Å‡∏°‡∏µ):")
    print("   üìä Base Stats: GL 62% vs VP 58%")
    print("   üé≠ Momentum Factor: GL +20% (‡∏ä‡∏ô‡∏∞ 2 maps)")
    print("   üß† Psychological: GL +15% (confidence)")
    print("   ‚öñÔ∏è Adjusted: GL 70% vs VP 30%")
    print()
    print("   üé≤ Recommendation: GamerLegion ML @ any odds")
    print("   üí∞ Kelly: 15-20% (‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤)")
    print("   ‚ö†Ô∏è Risk: Medium (momentum-driven)")
    print()
    
    print("üìã ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà:")
    print("   ‚Ä¢ Momentum > Historical Stats")
    print("   ‚Ä¢ Psychology > Pure Numbers")  
    print("   ‚Ä¢ Recent Form > Long-term Stats")
    print("   ‚Ä¢ Live Context > Static Data")
    print()

def update_prediction_tracker():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Prediction Tracker"""
    
    tracker = PredictionTracker()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    print("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:")
    print("="*60)
    
    tracker.generate_performance_report()
    
    # ‡πÅ‡∏™‡∏î‡∏á learning insights
    insights = tracker.get_learning_insights()
    
    print("\nüß† Insights ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:")
    for mistake in insights["recent_mistakes"][:3]:
        print(f"   ‚ùå {mistake['match']}")
        print(f"      ‡∏Ñ‡∏≤‡∏î: {mistake['predicted']} | ‡∏à‡∏£‡∏¥‡∏á: {mistake['actual']}")
        for lesson in mistake['lessons'][:2]:
            print(f"      üìù {lesson}")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    
    print("üí• VP vs GL Ancient - ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
    print("="*80)
    
    update_ancient_prediction()
    analyze_prediction_failure()
    update_learning_model()
    generate_improved_predictions()
    update_prediction_tracker()
    
    print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
    print("üìà Win Rate ‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ")
    print("üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏ú‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏µ‡∏Å")
    print("="*80)

if __name__ == "__main__":
    main()
