#!/usr/bin/env python3
"""
‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ - ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏°‡∏ï‡∏ä‡πå CS2 ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å
Created by KoJao
"""

import os
import sys
import asyncio
import json
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional

# Fix Windows console encoding
if sys.platform.startswith('win'):
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.upcoming_matches_predictor import get_predictor
from core.advanced_betting_analyzer import get_betting_analyzer
from core.real_odds_scraper import update_matches_with_real_odds
from app.utils.logger import setup_logger


def print_header():
    """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print("\n" + "=" * 80)
    print("üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏°‡∏ï‡∏ä‡πå CS2 - BLAST Open London 2025")
    print(f"üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {current_time}")
    print("‚ö° Created by KoJao")
    print("=" * 80)


def print_match_card(i: int, match: Dict[str, Any]) -> None:
    """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô"""
    print(f"\n+-- ‡πÅ‡∏°‡∏ï‡∏ä‡πå {i} {'-' * (65 - len(str(i)))}+")
    print(f"| [‡∏ó‡∏µ‡∏°] {match['team1']} vs {match['team2']:<40} |")
    print(f"| [‡πÄ‡∏ß‡∏•‡∏≤] {match['scheduled_time']:<48} |")
    print(f"| [‡∏£‡∏≤‡∏Ñ‡∏≤] {match['odds']:<48} |")
    
    if match['predicted_winner'] != 'No prediction yet':
        confidence_val = float(match['confidence'].rstrip('%'))
        confidence_indicator = "[‡∏™‡∏π‡∏á]" if confidence_val > 70 else "[‡∏Å‡∏•‡∏≤‡∏á]" if confidence_val > 55 else "[‡∏ï‡πà‡∏≥]"
        print(f"| {confidence_indicator} ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {match['predicted_winner']} ({match['confidence']}) {'':>15} |")
        print(f"| [‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•] {match['reasoning'][:45]:<45} |")
        if len(match['reasoning']) > 45:
            remaining = match['reasoning'][45:]
            while remaining:
                chunk = remaining[:45]
                remaining = remaining[45:]
                print(f"|         {chunk:<45} |")
    else:
        print(f"| [‡∏£‡∏≠] ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...{'':<30} |")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if 'betting_recommendations' in match and match['betting_recommendations']:
        print(f"| {'':>66} |")
        print(f"| [‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô] ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°: {'':>32} |")
        for j, rec in enumerate(match['betting_recommendations'][:3], 1):
            bet_line = f"{j}. {rec['selection']} @{rec['odds']} ({rec['confidence_level']})"
            print(f"| {bet_line:<64} |")
            ev_line = f"   EV: {rec['expected_value']:.1%} | ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {rec['stake_recommendation']:.1%}"
            print(f"| {ev_line:<64} |")
    
    print(f"+{'-' * 66}+")


def print_summary_section(summary: Dict[str, Any]) -> None:
    """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ"""
    print("\n" + "=" * 80)
    print("üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
    print("=" * 80)
    
    print(f"üìä ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {summary['total_upcoming_matches']}")
    print(f"üéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: {summary['total_predictions_made']}")
    print(f"‚è≥ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ú‡∏•: {summary['pending_matches']}")
    
    if summary['completed_matches'] > 0:
        print(f"‚úÖ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: {summary['completed_matches']}")
        print(f"üéØ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: {summary['accuracy_rate']}")
        print(f"‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å: {summary['correct_predictions']}")
        
        if summary['recent_results']:
            print("\nüèÜ ‡∏ú‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
            for result in summary['recent_results'][-3:]:
                status = "[‡∏ä‡∏ô‡∏∞]" if result.get('prediction_correct') else "[‡πÅ‡∏û‡πâ]"
                print(f"   {status} {result['teams']} - ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞: {result['winner']}")


async def print_betting_summary(matches: List[Dict[str, Any]]) -> None:
    """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°"""
    print("\n" + "=" * 80)
    print("üí∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")
    print("=" * 80)
    
    all_recommendations = []
    for match in matches:
        if 'betting_recommendations' in match:
            all_recommendations.extend(match['betting_recommendations'])
    
    if not all_recommendations:
        print("[‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£")
        return
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° expected value
    all_recommendations.sort(key=lambda x: x['expected_value'], reverse=True)
    
    print(f"[‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥] ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {len(all_recommendations)}")
    
    # ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÅ‡∏°‡∏ï‡∏ä‡πå
    print("\n[‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏î‡∏µ] ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ Expected Value ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:")
    for i, rec in enumerate(all_recommendations[:3], 1):
        print(f"  {i}. {rec['selection']} @{rec['odds']} - EV: {rec['expected_value']:.1%} ({rec['confidence_level']})")
        print(f"     ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {rec['risk_level']} | ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô: {rec['stake_recommendation']:.1%} ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô")
        print(f"     ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {rec['reasoning'][:60]}...")
        print()
    
    # ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
    bet_types = {}
    for rec in all_recommendations:
        bet_type = rec['selection'].split()[0] if 'Over' in rec['selection'] or 'Under' in rec['selection'] else '‡πÅ‡∏°‡∏ï‡∏ä‡πå/‡πÅ‡∏Æ‡∏ô‡∏î‡∏¥‡πÅ‡∏Ñ‡∏õ'
        bet_types[bet_type] = bet_types.get(bet_type, 0) + 1
    
    print("[‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó] ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô:")
    for bet_type, count in bet_types.items():
        print(f"  {bet_type}: {count} ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™")
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    risk_levels = {'LOW': 0, 'MEDIUM': 0, 'HIGH': 0}
    for rec in all_recommendations:
        risk_levels[rec['risk_level']] += 1
    
    print("\n[‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á] ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á:")
    risk_thai = {'LOW': '‡∏ï‡πà‡∏≥', 'MEDIUM': '‡∏Å‡∏•‡∏≤‡∏á', 'HIGH': '‡∏™‡∏π‡∏á'}
    for risk, count in risk_levels.items():
        print(f"  ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á{risk_thai[risk]}: {count} ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô")


def print_footer() -> None:
    """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"""
    print("\n" + "=" * 80)
    print("üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ")
    print("=" * 80)
    print("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: python scripts/show_predictions_thai.py")
    print("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡πÅ‡∏°‡∏ï‡∏ä‡πå: python scripts/report_result.py")
    print("üìà ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: python scripts/daily_report_generator.py")
    print("‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
    print("‚ö° Created by KoJao - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå CS2 ‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥")
    print("=" * 80 + "\n")


async def save_predictions_snapshot(matches: List[Dict[str, Any]], summary: Dict[str, Any]) -> None:
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πÅ‡∏ô‡∏õ‡∏ä‡πá‡∏≠‡∏ï‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    try:
        snapshot_dir = Path("data/snapshots")
        snapshot_dir.mkdir(parents=True, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        snapshot_file = snapshot_dir / f"predictions_snapshot_thai_{timestamp}.json"
        
        # ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πÅ‡∏ô‡∏õ‡∏ä‡πá‡∏≠‡∏ï
        betting_summary = {
            "total_opportunities": sum(len(m.get('betting_recommendations', [])) for m in matches),
            "high_confidence_bets": sum(1 for m in matches for r in m.get('betting_recommendations', []) if r.get('confidence_level') == 'HIGH'),
            "avg_expected_value": sum(r.get('expected_value', 0) for m in matches for r in m.get('betting_recommendations', [])) / max(1, sum(len(m.get('betting_recommendations', [])) for m in matches))
        }
        
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON serialization
        clean_matches = []
        for match in matches:
            clean_match = match.copy()
            # ‡∏•‡∏ö real_odds_data ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ serialize ‡πÑ‡∏î‡πâ
            if 'real_odds_data' in clean_match:
                del clean_match['real_odds_data']
            clean_matches.append(clean_match)
        
        snapshot_data = {
            "timestamp": datetime.now().isoformat(),
            "matches": clean_matches,
            "summary": summary,
            "betting_analysis": betting_summary,
            "created_by": "KoJao",
            "language": "thai"
        }
        
        with open(snapshot_file, 'w', encoding='utf-8') as f:
            json.dump(snapshot_data, f, indent=2, ensure_ascii=False)
            
        print(f"[‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πÅ‡∏ô‡∏õ‡∏ä‡πá‡∏≠‡∏ï: {snapshot_file.name}")
    except Exception as e:
        print(f"[‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πÅ‡∏ô‡∏õ‡∏ä‡πá‡∏≠‡∏ï - {e}")


async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°"""
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
    logger = setup_logger("show_predictions_thai")
    
    try:
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        print("[‡πÄ‡∏£‡∏¥‡πà‡∏°] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ CS2...")
        predictor = get_predictor()
        betting_analyzer = get_betting_analyzer()
        
        # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        print_header()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        print("\n[AI] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢...")
        try:
            await predictor.generate_predictions()
            print("[‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        except Exception as e:
            print(f"[‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {e}")
            logger.error(f"‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            return
        
        # ‡∏î‡∏∂‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        try:
            matches = await predictor.get_upcoming_matches_with_predictions()
            if not matches:
                print("\n[‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
                return
        except Exception as e:
            print(f"[‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå: {e}")
            logger.error(f"‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            return
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á
        print("\n[‡∏£‡∏≤‡∏Ñ‡∏≤] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå...")
        try:
            matches = await update_matches_with_real_odds(matches)
            updated_count = sum(1 for m in matches if m.get('odds_updated', False))
            print(f"[‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {updated_count}/{len(matches)} ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á!")
        except Exception as e:
            print(f"[‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á: {e}")
            logger.warning(f"‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏°‡∏ï‡∏ä‡πå
        print("\n[‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô...")
        try:
            for match in matches:
                match_id = f"blast_london_{match['team1'].lower()}_{match['team2'].lower()}"
                betting_recs = await betting_analyzer.analyze_betting_opportunities(
                    match_id, match['team1'], match['team2']
                )
                match['betting_recommendations'] = [{
                    'selection': rec.selection,
                    'odds': rec.odds,
                    'expected_value': rec.expected_value,
                    'confidence_level': rec.confidence_level,
                    'stake_recommendation': rec.stake_recommendation,
                    'reasoning': rec.reasoning,
                    'risk_level': rec.risk_level
                } for rec in betting_recs]
            print("[‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à] ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        except Exception as e:
            print(f"[‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô] ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            logger.warning(f"‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
            for match in matches:
                match['betting_recommendations'] = []
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
        print(f"\n[‡πÅ‡∏°‡∏ï‡∏ä‡πå] ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô ({len(matches)} ‡πÅ‡∏°‡∏ï‡∏ä‡πå)")
        for i, match in enumerate(matches, 1):
            print_match_card(i, match)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
        await print_betting_summary(matches)
        
        # ‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
        try:
            summary = await predictor.get_prediction_summary()
            print_summary_section(summary)
        except Exception as e:
            print(f"[‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ - {e}")
            logger.warning(f"‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            summary = {}
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πÅ‡∏ô‡∏õ‡∏ä‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
        await save_predictions_snapshot(matches, summary)
        
        # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢
        print_footer()
        
        logger.info(f"‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {len(matches)} ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        
    except KeyboardInterrupt:
        print("\n\n[‡∏´‡∏¢‡∏∏‡∏î] ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        print(f"\n[‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡πÉ‡∏ô main: {e}")
        raise


if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ CS2 ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ - Created by KoJao")
    asyncio.run(main())
