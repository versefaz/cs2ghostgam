#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BLAST Open London 2025 - ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å
Created by KoJao - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå CS2 ‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥
"""

import asyncio
import logging
from datetime import datetime
from pathlib import Path
import sys
import os

# Fix Windows console encoding
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import
sys.path.append(str(Path(__file__).parent.parent))

from core.enhanced_team_analyzer import EnhancedTeamAnalyzer, get_enhanced_analyzer
from core.deep_betting_analyzer import DeepBettingAnalyzer, get_deep_betting_analyzer
from app.utils.logger import setup_logger

def print_header():
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏∞‡∏ö‡∏ö"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå CS2 ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å - Created by KoJao")
    print()
    print("=" * 90)
    print("üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå CS2 ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å - ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û")
    print(f"üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("‚ö° Created by KoJao - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå CS2 ‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥")
    print("=" * 90)

def print_team_analysis(team_name: str, analysis, is_favorite: bool = False):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏°"""
    
    emoji = "üèÜ" if is_favorite else "‚ö°"
    status = "‡πÄ‡∏ï‡πá‡∏á" if is_favorite else "‡∏î‡∏≤‡∏£‡πå‡∏Å‡∏Æ‡∏≠‡∏£‡πå‡∏™"
    
    print(f"\n{emoji} ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏° {team_name} ({status})")
    print("+" + "-" * 82 + "+")
    print(f"| üèÖ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÇ‡∏•‡∏Å: #{analysis.current_ranking:<8} | üî• ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {analysis.recent_form:<15} |")
    print(f"| üìà ‡∏ä‡∏ô‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô: {analysis.win_streak} ‡πÅ‡∏°‡∏ï‡∏ä‡πå{'':>8} | üéØ ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô: {analysis.tactical_style:<15} |")
    print("|" + " " * 82 + "|")
    
    print("| üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏≤‡∏ß‡πÄ‡∏î‡πà‡∏ô:" + " " * 62 + "|")
    top_players = sorted(analysis.top_players, key=lambda x: x.rating, reverse=True)[:3]
    for i, player in enumerate(top_players, 1):
        form_emoji = {"excellent": "üî•", "good": "‚úÖ", "average": "‚ö°", "poor": "‚ùå"}.get(player.recent_form, "‚ö°")
        print(f"|    {i}. {player.name:<12} Rating: {player.rating:<5} K/D: {player.kd_ratio:<5} {form_emoji} {player.recent_form:<10} |")
    
    print("|" + " " * 82 + "|")
    print("| üó∫Ô∏è  ‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á:" + " " * 60 + "|")
    top_maps = sorted(analysis.map_performance, key=lambda x: x.win_rate, reverse=True)[:3]
    for i, map_stat in enumerate(top_maps, 1):
        print(f"|    {i}. {map_stat.map_name:<12} Win Rate: {map_stat.win_rate:.1f}%" + " " * 35 + "|")
        print(f"|    CT: {map_stat.ct_win_rate:.1f} % T: {map_stat.t_win_rate:.1f} % Pistol: {map_stat.pistol_round_win_rate:.1f} %" + " " * 20 + "|")
    
    print("|" + " " * 82 + "|")
    print("| ‚úÖ ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á:" + " " * 68 + "|")
    for strength in analysis.strengths[:2]:
        print(f"|    ‚Ä¢ {strength:<74} |")
    print("| ‚ùå ‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô:" + " " * 68 + "|")
    for weakness in analysis.weaknesses[:2]:
        print(f"|    ‚Ä¢ {weakness:<74} |")
    
    print("|" + " " * 82 + "|")
    print("| üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:" + " " * 64 + "|")
    print(f"|    ‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Comeback: {analysis.comeback_ability:.1f} %" + " " * 37 + "|")
    print(f"|    ‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡πÅ‡∏£‡∏á‡∏Å‡∏î‡∏î‡∏±‡∏ô: {analysis.pressure_performance:.1f} %" + " " * 30 + "|")
    print(f"|    ‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {analysis.average_match_duration:.1f}  ‡∏ô‡∏≤‡∏ó‡∏µ" + " " * 32 + "|")
    print("+" + "-" * 82 + "+")

def print_betting_analysis(opportunities, team1: str, team2: str):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å"""
    
    print(f"\n" + "=" * 90)
    print("üí∞ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î")
    print("=" * 90)
    
    if not opportunities:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")
        return
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    best_opportunity = max(opportunities, key=lambda x: x.expected_value)
    print(f"üèÜ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {best_opportunity.selection} @{best_opportunity.odds}")
    print(f"üíé Expected Value: {best_opportunity.expected_value:.1%} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {best_opportunity.risk_level}")
    print(f"üí∞ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô: {best_opportunity.stake_recommendation:.1%} ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô")
    
    print(f"\nüéØ ‡∏û‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à {len(opportunities)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™
    confidence_emoji = {"HIGH": "üî•", "MEDIUM": "‚ö°", "LOW": "üí°"}
    risk_emoji = {"HIGH": "üî¥", "MEDIUM": "üü°", "LOW": "üü¢"}
    
    for i, opp in enumerate(opportunities, 1):
        print(f"\n‚îå‚îÄ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö {i}: {opp.selection} ‚îÄ{'-' * (60 - len(opp.selection))}‚îê")
        print(f"‚îÇ üíµ ‡∏£‡∏≤‡∏Ñ‡∏≤: {opp.odds:<8} ‚îÇ üìä Expected Value: {opp.expected_value:.1%} {'':>8} ‚îÇ")
        print(f"‚îÇ {confidence_emoji[opp.confidence_level]} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {opp.confidence_level:<12} ‚îÇ {risk_emoji[opp.risk_level]} ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {opp.risk_level:<8} ‚îÇ")
        print(f"‚îÇ üí∞ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô: {opp.stake_recommendation:.1%} ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô {'':>25} ‚îÇ")
        print(f"‚îÇ {'':>70} ‚îÇ")
        print(f"‚îÇ üß† ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å: {'':>52} ‚îÇ")
        
        # ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        reasoning_parts = opp.detailed_reasoning.split(" | ")
        for j, part in enumerate(reasoning_parts[:4], 1):
            if len(part) > 65:
                part = part[:62] + "..."
            print(f"‚îÇ {j}. {part:<65} ‚îÇ")
        
        print(f"‚îÇ {'':>70} ‚îÇ")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô
        if opp.supporting_stats:
            print(f"‚îÇ üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô: {'':>52} ‚îÇ")
            for stat_key, stat_value in opp.supporting_stats.items():
                if isinstance(stat_value, (int, float)):
                    print(f"‚îÇ    ‚Ä¢ {stat_key}: {stat_value:<10} {'':>48} ‚îÇ")
                else:
                    print(f"‚îÇ    ‚Ä¢ {stat_key}: {str(stat_value):<10} {'':>48} ‚îÇ")
        
        print("‚îî" + "‚îÄ" * 70 + "‚îò")
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    risk_counts = {"LOW": 0, "MEDIUM": 0, "HIGH": 0}
    for opp in opportunities:
        risk_counts[opp.risk_level] += 1
    
    print(f"\nüìä ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á:")
    if risk_counts["LOW"] > 0:
        print(f"   üü¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥: {risk_counts['LOW']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á")
    if risk_counts["MEDIUM"] > 0:
        print(f"   üü° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏•‡∏≤‡∏á: {risk_counts['MEDIUM']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")
    if risk_counts["HIGH"] > 0:
        print(f"   üî¥ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á: {risk_counts['HIGH']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏†‡∏±‡∏¢")
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    high_confidence_bets = [opp for opp in opportunities if opp.confidence_level == "HIGH"]
    if high_confidence_bets:
        print(f"\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô:")
        print(f"   ‚úÖ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á {len(high_confidence_bets)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        total_stake = sum(opp.stake_recommendation for opp in high_confidence_bets[:3])
        print(f"   üí∞ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° {total_stake:.1%} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å")
        
        # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        best_low_risk = min(opportunities, key=lambda x: 0 if x.risk_level == "LOW" else 1)
        if best_low_risk.risk_level == "LOW":
            print(f"   üõ°Ô∏è  ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: {best_low_risk.selection} @{best_low_risk.odds}")
        
        best_value = max(opportunities, key=lambda x: x.expected_value)
        print(f"   üíé ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {best_value.selection} @{best_value.odds} (EV: {best_value.expected_value:.1%})")
    else:
        print("   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")
    
    print(f"   ‚ö†Ô∏è  ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

async def analyze_match(team1: str, team2: str, match_time: str):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å"""
    
    print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏ï‡∏ä‡πå: {team1} vs {team2}")
    print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå: {match_time}")
    print("üìä ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å HLTV ‡πÅ‡∏•‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô...")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    team_analyzer = get_enhanced_analyzer()
    betting_analyzer = get_deep_betting_analyzer()
    
    try:
        # Mock match data for demonstration
        match = {
            'match_id': f'blast_london_{team1.lower()}_{team2.lower()}',
            'team1': team1,
            'team2': team2,
            'tournament': 'BLAST Premier Open London 2025',
            'match_time': match_time,
            'status': 'upcoming'
        }
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏°
        print("\n‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°...")
        team1_analysis = await team_analyzer.analyze_team(match['team1'])
        team2_analysis = await team_analyzer.analyze_team(match['team2'])
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏°
        print_team_analysis(team1, team1_analysis, is_favorite=True)
        print_team_analysis(team2, team2_analysis, is_favorite=False)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
        print("\n‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô...")
        match_analysis = await betting_analyzer.analyze_match_deep(match['team1'], match['team2'])
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
        print_betting_analysis(match_analysis["betting_opportunities"], match['team1'], match['team2'])
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        print("\n" + "=" * 90)
        print("üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏°‡∏ï‡∏ä‡πå")
        print("=" * 90)
        
        prediction = match_analysis["prediction"]
        print(f"üèÜ ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {prediction.predicted_winner}")
        print(f"üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: {prediction.confidence:.1%}")
        
        print("\nüîë ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏ï‡∏≤:")
        for i, reason in enumerate(prediction.reasoning[:3], 1):
            print(f"   {i}. {reason}")
        
        print(f"\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô:")
        print(f"   ‚Ä¢ {team1} vs {team2} ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å")
        print(f"   ‚Ä¢ ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏°‡∏µ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô")
        print(f"   ‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡∏π handicap ‡πÅ‡∏•‡∏∞ total maps ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
        
        return match_analysis
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        logging.error(f"Error in analysis: {e}")
        return None

async def main():
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏ï‡∏ä‡πå BLAST Open London 2025 ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"""
    
    logger = setup_logger("blast_london_analysis")
    
    try:
        print_header()
        
        print("\nüìÖ BLAST Open London 2025 - ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (27 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2025)")
        print("üèüÔ∏è  ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: BLAST Premier Open Season 2")
        print("üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: $400,000")
        print("üåç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå (‡∏Å‡∏£‡∏∏‡πä‡∏õ‡∏™‡πÄ‡∏ï‡∏à)")
        
        # ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà 1: GamerLegion vs Virtus.pro
        print("\n" + "üî•" * 45)
        print("üéÆ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà 1")
        print("üî•" * 45)
        
        match1_result = await analyze_match("GamerLegion", "Virtus.pro", "1:30 PM BST (20:30 ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)")
        
        # ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà 2: Vitality vs M80  
        print("\n" + "üî•" * 45)
        print("üéÆ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà 2")
        print("üî•" * 45)
        
        match2_result = await analyze_match("Vitality", "M80", "11:00 AM BST (18:00 ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)")
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°
        print("\n" + "=" * 90)
        print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
        print("=" * 90)
        
        print("üèÜ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
        print("   ‚Ä¢ GamerLegion vs Virtus.pro - ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô")
        print("   ‚Ä¢ Vitality vs M80 - ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ upset ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à")
        
        print("\nüí∞ ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
        print("   ‚Ä¢ ‡∏î‡∏π handicap ‡πÉ‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå GamerLegion vs Virtus.pro")
        print("   ‚Ä¢ M80 upset potential ‡πÉ‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏Å‡∏±‡∏ö Vitality")
        
        print("\n‚ö° Created by KoJao - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå CS2 ‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥")
        print("=" * 90)
        
    except KeyboardInterrupt:
        print("\n\n[‡∏´‡∏¢‡∏∏‡∏î] ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        print(f"\n[‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡πÉ‡∏ô main: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
