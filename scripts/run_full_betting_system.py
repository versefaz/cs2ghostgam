#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Complete CS2 Betting System Runner
‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô CS2 ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£ - ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
"""

import sys
import asyncio
import json
from pathlib import Path
from datetime import datetime

# Fix Windows console encoding
if sys.platform == "win32":
    import codecs
    try:
        sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
        sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())
    except AttributeError:
        # Already detached or not available
        pass

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import
sys.path.append(str(Path(__file__).parent.parent))

from core.automated_betting_pipeline import AutomatedBettingPipeline
from core.odds_scraper import MultiSourceOddsScraper
from core.universal_match_analyzer import UniversalMatchAnalyzer, AnalysisDepth

def print_system_banner():
    """‡πÅ‡∏™‡∏î‡∏á banner ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    print("üéØ" + "=" * 78 + "üéØ")
    print("üöÄ          CS2 BETTING INTELLIGENCE SYSTEM - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô CS2          üöÄ")
    print("üéØ" + "=" * 78 + "üéØ")
    print("üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô CS2 ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    print("üí∞ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡πà‡∏á + ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å + ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô")
    print("üß† AI-Powered Analysis: Psychology + Tactics + Form + Value Betting")
    print("=" * 80)

async def run_complete_system():
    """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£"""
    
    print_system_banner()
    
    print("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô CS2...")
    
    try:
        # Step 1: ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
        print("\nüì° Step 1: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        pipeline = AutomatedBettingPipeline()
        recommendations = await pipeline.run_full_pipeline()
        
        print(f"\n‚úÖ ‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(recommendations)} ‡πÅ‡∏°‡∏ï‡∏ä‡πå")
        
        # Step 2: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        await save_system_results(recommendations)
        
        # Step 3: ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        display_final_summary(recommendations)
        
        return recommendations
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: {e}")
        return []

async def save_system_results(recommendations):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå results
    results_dir = Path("results")
    results_dir.mkdir(exist_ok=True)
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
    recommendations_file = results_dir / f"betting_recommendations_{timestamp}.json"
    
    recommendations_data = []
    for rec in recommendations:
        rec_dict = {
            "match_id": rec.match_id,
            "primary_bet": rec.primary_bet,
            "backup_bets": rec.backup_bets,
            "confidence_level": rec.confidence_level,
            "reasoning": rec.reasoning,
            "risk_level": rec.risk_level,
            "kelly_percentage": rec.kelly_percentage,
            "expected_value": rec.expected_value,
            "timestamp": timestamp
        }
        recommendations_data.append(rec_dict)
    
    with open(recommendations_file, 'w', encoding='utf-8') as f:
        json.dump(recommendations_data, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡πâ‡∏ß: {recommendations_file}")

def display_final_summary(recommendations):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"""
    
    print("\n" + "üéØ" + "=" * 78 + "üéØ")
    print("üìã                    ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö CS2 BETTING                    üìã")
    print("üéØ" + "=" * 78 + "üéØ")
    
    if not recommendations:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô")
        return
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
    total_matches = len(recommendations)
    high_confidence = len([r for r in recommendations if r.confidence_level > 0.8])
    positive_ev = len([r for r in recommendations if r.expected_value > 0])
    low_risk = len([r for r in recommendations if r.risk_level == "low"])
    
    print(f"üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°:")
    print(f"   üéØ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_matches}")
    print(f"   üî• ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á (>80%): {high_confidence}")
    print(f"   üí∞ Expected Value ‡∏ö‡∏ß‡∏Å: {positive_ev}")
    print(f"   üü¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥: {low_risk}")
    
    # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Top 3
    sorted_recs = sorted(recommendations, key=lambda x: x.expected_value, reverse=True)
    
    print(f"\nüèÜ TOP 3 ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
    
    for i, rec in enumerate(sorted_recs[:3], 1):
        risk_emoji = "üî¥" if rec.risk_level == "high" else "üü°" if rec.risk_level == "medium" else "üü¢"
        
        print(f"\n   {i}. {rec.primary_bet.get('match', 'Unknown Match')}")
        print(f"      üéØ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô: {rec.primary_bet.get('selection', 'Unknown')} @ {rec.primary_bet.get('odds', 0):.2f}")
        print(f"      üìà EV: {rec.expected_value:.3f} | Kelly: {rec.kelly_percentage:.1f}% | {risk_emoji} {rec.risk_level}")
        print(f"      üí° ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {rec.reasoning[0] if rec.reasoning else '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}")
    
    # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
    print(f"\nüíº ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô:")
    print(f"   ‚Ä¢ ‡πÉ‡∏ä‡πâ Kelly Criterion ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô")
    print(f"   ‚Ä¢ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2-5% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡πÅ‡∏°‡∏ï‡∏ä‡πå")
    print(f"   ‚Ä¢ ‡πÄ‡∏ô‡πâ‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ Expected Value ‡∏ö‡∏ß‡∏Å")
    print(f"   ‚Ä¢ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà")
    
    print("\nüéØ" + "=" * 78 + "üéØ")
    print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    print("üéØ" + "=" * 78 + "üéØ")

async def run_quick_analysis(team1: str, team2: str):
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
    
    print(f"‚ö° ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß: {team1} vs {team2}")
    print("-" * 50)
    
    analyzer = UniversalMatchAnalyzer()
    analysis = await analyzer.analyze_any_match(team1, team2, AnalysisDepth.WORLD_CLASS)
    
    print(f"üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {analysis.prediction_confidence:.1%}")
    print(f"üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {analysis.betting_recommendations.get('recommended_team', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}")
    
    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
    print(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: 1.85 / 1.95")
    
    return analysis

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="CS2 Betting System")
    parser.add_argument("--quick", nargs=2, metavar=("TEAM1", "TEAM2"), 
                       help="‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 2 ‡∏ó‡∏µ‡∏°")
    parser.add_argument("--full", action="store_true", 
                       help="‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")
    
    args = parser.parse_args()
    
    if args.quick:
        asyncio.run(run_quick_analysis(args.quick[0], args.quick[1]))
    elif args.full:
        asyncio.run(run_complete_system())
    else:
        # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        asyncio.run(run_complete_system())
