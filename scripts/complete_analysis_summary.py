#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Complete Analysis Summary - ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
"""

import json
import sys
import os
from datetime import datetime
from typing import Dict, List, Any

# Windows console encoding fix
if sys.platform.startswith('win'):
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())

class CompleteAnalysisSummary:
    def __init__(self):
        self.current_time = datetime.now().strftime("%H:%M:%S")
        
    def load_all_analysis_data(self) -> Dict[str, Any]:
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        data_dir = "data"
        all_data = {}
        
        if not os.path.exists(data_dir):
            return all_data
            
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Deep BLAST Analysis
        blast_files = [f for f in os.listdir(data_dir) if f.startswith("deep_blast_analysis_")]
        if blast_files:
            latest_blast = max(blast_files, key=lambda x: os.path.getctime(os.path.join(data_dir, x)))
            try:
                with open(os.path.join(data_dir, latest_blast), 'r', encoding='utf-8') as f:
                    all_data['deep_blast'] = json.load(f)
            except:
                pass
                
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• VP vs GL Analysis
        vp_gl_files = [f for f in os.listdir(data_dir) if f.startswith("vp_gl_deep_analysis_")]
        if vp_gl_files:
            latest_vp_gl = max(vp_gl_files, key=lambda x: os.path.getctime(os.path.join(data_dir, x)))
            try:
                with open(os.path.join(data_dir, latest_vp_gl), 'r', encoding='utf-8') as f:
                    all_data['vp_gl_deep'] = json.load(f)
            except:
                pass
                
        return all_data
        
    def display_complete_summary(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
        
        print("="*100)
        print(f"üî¨ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏ö‡∏ö - BLAST Open London 2025")
        print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {self.current_time} | üáπüá≠ ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢")
        print("="*100)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        all_data = self.load_all_analysis_data()
        
        if not all_data:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            return
            
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏°‡∏ï‡∏ä‡πå
        self.display_match_by_match_analysis(all_data)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        self.display_best_betting_recommendations(all_data)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
        self.display_bankroll_strategy(all_data)
        
    def display_match_by_match_analysis(self, all_data: Dict):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏°‡∏ï‡∏ä‡πå"""
        
        print("\nüìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏°‡∏ï‡∏ä‡πå (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤)")
        print("="*80)
        
        matches = [
            {"name": "Vitality vs M80", "time": "LIVE", "status": "üî¥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Ç‡πà‡∏á"},
            {"name": "Virtus.pro vs GamerLegion", "time": "20:30", "status": "üü° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°"},
            {"name": "FaZe vs ECSTATIC", "time": "22:00", "status": "‚è∞ ‡∏£‡∏≠‡πÅ‡∏Ç‡πà‡∏á"},
            {"name": "NAVI vs fnatic", "time": "00:30", "status": "‚è∞ ‡∏£‡∏≠‡πÅ‡∏Ç‡πà‡∏á"}
        ]
        
        for i, match in enumerate(matches, 1):
            print(f"\nüéØ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà {i}: {match['name']} ({match['time']}) {match['status']}")
            print("‚îÄ" * 60)
            
            if match['name'] == "Virtus.pro vs GamerLegion" and 'vp_gl_deep' in all_data:
                self.display_vp_gl_detailed_analysis(all_data['vp_gl_deep'])
            elif 'deep_blast' in all_data:
                self.display_blast_match_analysis(match['name'], all_data['deep_blast'])
                
    def display_vp_gl_detailed_analysis(self, vp_gl_data: Dict):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå VP vs GL ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        
        print("üîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏û‡∏¥‡πÄ‡∏®‡∏©:")
        
        # True Probabilities
        true_probs = vp_gl_data.get('true_probabilities', {})
        vp_prob = true_probs.get('vp', 0) * 100
        gl_prob = true_probs.get('gl', 0) * 100
        print(f"   üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á: VP {vp_prob:.1f}% vs GL {gl_prob:.1f}%")
        
        # Map Analysis
        map_analysis = vp_gl_data.get('map_analysis', {})
        vp_maps = map_analysis.get('vp_strong_maps', [])
        gl_maps = map_analysis.get('gl_strong_maps', [])
        
        print(f"   üó∫Ô∏è ‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏á:")
        print(f"      VP: {', '.join([m['map'] for m in vp_maps])}")
        print(f"      GL: {', '.join([m['map'] for m in gl_maps])}")
        
        # Player Analysis
        player_analysis = vp_gl_data.get('player_analysis', {})
        carry_analysis = player_analysis.get('carry_analysis', {})
        if carry_analysis:
            vp_carry = carry_analysis.get('vp_top_carry', {})
            gl_carry = carry_analysis.get('gl_top_carry', {})
            print(f"   üë§ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å: {vp_carry.get('player', 'N/A')} ({vp_carry.get('rating', 0)}) vs {gl_carry.get('player', 'N/A')} ({gl_carry.get('rating', 0)})")
        
        # Value Bets
        value_bets = vp_gl_data.get('value_bets', {})
        gl_bet = value_bets.get('gl')
        if gl_bet:
            kelly = gl_bet.get('kelly_fraction', 0) * 100
            print(f"   üí∞ Value Bet: GamerLegion ML @ 2.15 (Kelly: {kelly:.1f}%)")
            
    def display_blast_match_analysis(self, match_name: str, blast_data: Dict):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å BLAST system"""
        
        analyses = blast_data.get('analyses', [])
        
        # ‡∏´‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        match_mapping = {
            "Vitality vs M80": "vitality_m80",
            "FaZe vs ECSTATIC": "faze_ecstatic", 
            "NAVI vs fnatic": "navi_fnatic"
        }
        
        match_id = match_mapping.get(match_name)
        if not match_id:
            print("   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            return
            
        match_data = None
        for analysis in analyses:
            if analysis.get('match_id') == match_id:
                match_data = analysis
                break
                
        if not match_data:
            print("   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            return
            
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        true_probs = match_data.get('true_probabilities', {})
        team1_prob = true_probs.get('team1', 0) * 100
        team2_prob = true_probs.get('team2', 0) * 100
        print(f"   üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á: {team1_prob:.1f}% vs {team2_prob:.1f}%")
        
        # Value Bets
        value_bets = match_data.get('value_bets', [])
        if value_bets:
            for bet in value_bets:
                team = bet.get('team', 'Unknown')
                odds = bet.get('odds', 0)
                kelly = bet.get('kelly_fraction', 0) * 100
                print(f"   üí∞ Value Bet: {team} ML @ {odds} (Kelly: {kelly:.1f}%)")
        
        # Top Profit Opportunities
        opportunities = match_data.get('profit_opportunities', [])[:2]
        if opportunities:
            print("   üé≤ ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≥‡∏Å‡∏≥‡πÑ‡∏£‡∏´‡∏•‡∏±‡∏Å:")
            for opp in opportunities:
                category = opp.get('category', '')
                bet = opp.get('bet', '')
                probability = opp.get('probability', '')
                print(f"      ‚Ä¢ {category}: {bet} ({probability})")
                
    def display_best_betting_recommendations(self, all_data: Dict):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
        
        print(f"\nüíé ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
        print("="*60)
        
        all_value_bets = []
        
        # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° Value Bets ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        if 'deep_blast' in all_data:
            analyses = all_data['deep_blast'].get('analyses', [])
            for analysis in analyses:
                value_bets = analysis.get('value_bets', [])
                for bet in value_bets:
                    bet['source'] = 'Deep BLAST'
                    bet['match_id'] = analysis.get('match_id', '')
                    all_value_bets.append(bet)
                    
        if 'vp_gl_deep' in all_data:
            vp_gl_bets = all_data['vp_gl_deep'].get('value_bets', {})
            if vp_gl_bets.get('gl'):
                bet = vp_gl_bets['gl'].copy()
                bet['team'] = 'GamerLegion'
                bet['odds'] = 2.15
                bet['source'] = 'VP-GL Deep'
                bet['match_id'] = 'vp_gl'
                all_value_bets.append(bet)
                
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° Expected Value
        sorted_bets = sorted(all_value_bets, 
                           key=lambda x: x.get('expected_value', 0), 
                           reverse=True)
        
        print("üèÜ Top Value Bets (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° Expected Value):")
        for i, bet in enumerate(sorted_bets[:5], 1):
            team = bet.get('team', 'Unknown')
            odds = bet.get('odds', 0)
            kelly = bet.get('kelly_fraction', 0) * 100
            ev = bet.get('expected_value', 0)
            confidence = bet.get('confidence', 'Unknown')
            source = bet.get('source', 'Unknown')
            
            confidence_emoji = "üéØ" if confidence == "High" else "üìä" if confidence == "Medium" else "‚ùì"
            print(f"   {i}. {confidence_emoji} {team} ML @ {odds}")
            print(f"      Kelly: {kelly:.1f}% | EV: {ev:.3f} | Source: {source}")
            
        # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
        print(f"\n‚è∞ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤:")
        
        time_recommendations = [
            {"time": "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", "match": "VP vs GL", "bet": "GamerLegion ML @ 2.15", "kelly": "1.7%", "reason": "‡∏Ñ‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏î‡∏µ"},
            {"time": "22:00", "match": "FaZe vs ECSTATIC", "bet": "FaZe ML @ 1.33", "kelly": "59.7%", "reason": "Value ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î Edge ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡∏¢‡∏°"},
            {"time": "00:30", "match": "NAVI vs fnatic", "bet": "NAVI ML @ 1.27", "kelly": "53.0%", "reason": "‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏∏‡∏î ‡πÄ‡∏ï‡πá‡∏á‡πÅ‡∏£‡∏á"}
        ]
        
        for rec in time_recommendations:
            print(f"   üïê {rec['time']}: {rec['match']}")
            print(f"      üí∞ {rec['bet']} (Kelly: {rec['kelly']})")
            print(f"      üìù ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {rec['reason']}")
            
    def display_bankroll_strategy(self, all_data: Dict):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô"""
        
        print(f"\nüé≤ ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô (Bankroll Management)")
        print("="*60)
        
        print("üí∞ ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Bankroll 10,000 ‡∏ö‡∏≤‡∏ó):")
        
        allocations = [
            {"match": "VP vs GL", "amount": "170 ‡∏ö‡∏≤‡∏ó", "percentage": "1.7%", "reason": "Kelly ‡πÄ‡∏•‡πá‡∏Å ‡πÅ‡∏ï‡πà‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏î‡∏µ"},
            {"match": "FaZe vs ECSTATIC", "amount": "3,000 ‡∏ö‡∏≤‡∏ó", "percentage": "30%", "reason": "Kelly ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡πÅ‡∏ï‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"},
            {"match": "NAVI vs fnatic", "amount": "2,500 ‡∏ö‡∏≤‡∏ó", "percentage": "25%", "reason": "‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ Kelly ‡∏™‡∏π‡∏á"},
            {"match": "Map/Player Bets", "amount": "1,000 ‡∏ö‡∏≤‡∏ó", "percentage": "10%", "reason": "‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å"},
            {"match": "‡∏™‡∏≥‡∏£‡∏≠‡∏á", "amount": "3,330 ‡∏ö‡∏≤‡∏ó", "percentage": "33.3%", "reason": "‡∏£‡∏≠‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠ Live Betting"}
        ]
        
        for allocation in allocations:
            print(f"   ‚Ä¢ {allocation['match']}: {allocation['amount']} ({allocation['percentage']})")
            print(f"     ‚îî‚îÄ {allocation['reason']}")
            
        print(f"\n‚ö†Ô∏è ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:")
        print("   üõ°Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 30% ‡πÉ‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
        print("   üìä ‡πÉ‡∏ä‡πâ Kelly Criterion ‡πÅ‡∏ï‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")
        print("   ‚è∞ ‡∏£‡∏≠‡∏î‡∏π‡∏ú‡∏•‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÅ‡∏£‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå")
        print("   üîÑ ‡∏´‡∏≤‡∏Å‡∏ä‡∏ô‡∏∞‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô ‡∏´‡∏≤‡∏Å‡πÅ‡∏û‡πâ ‡∏•‡∏î‡∏•‡∏á")
        print("   üö´ ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏´‡∏≤‡∏Å‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 20%")
        
        print(f"\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:")
        print("   1Ô∏è‚É£ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å VP vs GL (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥)")
        print("   2Ô∏è‚É£ FaZe vs ECSTATIC (‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å)")
        print("   3Ô∏è‚É£ NAVI vs fnatic (‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)")
        print("   4Ô∏è‚É£ Map Betting ‡∏ï‡∏≤‡∏° Veto ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô")
        
        end_time = datetime.now().strftime("%H:%M:%S")
        print(f"\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {end_time}")
        print("="*100)

if __name__ == "__main__":
    summary = CompleteAnalysisSummary()
    summary.display_complete_summary()
