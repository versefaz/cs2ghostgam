#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BLAST Open London 2025 - ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 3 ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å
Created by KoJao - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå CS2 ‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥
"""

import asyncio
import logging
from datetime import datetime
from pathlib import Path
import sys
import os

# Fix Windows console encoding
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import
sys.path.append(str(Path(__file__).parent.parent))

from core.enhanced_team_analyzer import EnhancedTeamAnalyzer, get_enhanced_analyzer
from core.deep_betting_analyzer import DeepBettingAnalyzer, get_deep_betting_analyzer
from app.utils.logger import setup_logger

def print_header():
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏∞‡∏ö‡∏ö"""
    print("üöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå CS2 ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å - Created by KoJao")
    print()
    print("=" * 100)
    print("üéØ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 3 ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏´‡∏•‡∏±‡∏Å BLAST Open London 2025")
    print(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("‚ö° Created by KoJao - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå CS2 ‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥")
    print("=" * 100)

def print_match_header(match_num: int, team1: str, team2: str, time: str):
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏°‡∏ï‡∏ä‡πå"""
    print(f"\n{'üî•' * 50}")
    print(f"üéÆ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà {match_num}: {team1} vs {team2}")
    print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {time}")
    print(f"{'üî•' * 50}")

async def analyze_match_comprehensive(team1: str, team2: str, match_time: str, favorite_team: str = None):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    team_analyzer = get_enhanced_analyzer()
    betting_analyzer = get_deep_betting_analyzer()
    
    try:
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏°
        print(f"\n‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏° {team1} vs {team2}...")
        team1_analysis = await team_analyzer.analyze_team(team1)
        team2_analysis = await team_analyzer.analyze_team(team2)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡∏°
        print_team_comparison(team1, team2, team1_analysis, team2_analysis, favorite_team)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
        print(f"\n‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô...")
        match_analysis = await betting_analyzer.analyze_match_deep(team1, team2)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
        print_betting_opportunities(match_analysis["betting_opportunities"], team1, team2)
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        prediction = match_analysis["prediction"]
        print_match_prediction(prediction, team1, team2)
        
        return match_analysis
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {e}")
        return None

def print_team_comparison(team1: str, team2: str, analysis1, analysis2, favorite_team: str = None):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡∏°"""
    
    print(f"\nüìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡∏°")
    print("+" + "-" * 98 + "+")
    print(f"| {'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•':<20} | {team1:<35} | {team2:<35} |")
    print("+" + "-" * 98 + "+")
    print(f"| {'üèÖ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÇ‡∏•‡∏Å':<20} | #{analysis1.current_ranking:<34} | #{analysis2.current_ranking:<34} |")
    print(f"| {'üî• ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î':<20} | {analysis1.recent_form:<35} | {analysis2.recent_form:<35} |")
    print(f"| {'üìà ‡∏ä‡∏ô‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô':<20} | {analysis1.win_streak} ‡πÅ‡∏°‡∏ï‡∏ä‡πå{'':<28} | {analysis2.win_streak} ‡πÅ‡∏°‡∏ï‡∏ä‡πå{'':<28} |")
    print(f"| {'üéØ ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô':<20} | {analysis1.tactical_style:<35} | {analysis2.tactical_style:<35} |")
    print("+" + "-" * 98 + "+")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏≤‡∏ß‡πÄ‡∏î‡πà‡∏ô
    print(f"\nüë• ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏≤‡∏ß‡πÄ‡∏î‡πà‡∏ô:")
    print("+" + "-" * 98 + "+")
    print(f"| {'‡∏•‡∏≥‡∏î‡∏±‡∏ö':<8} | {team1 + ' Players':<42} | {team2 + ' Players':<42} |")
    print("+" + "-" * 98 + "+")
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≤‡∏° rating
    players1 = sorted(analysis1.players, key=lambda x: x.rating, reverse=True)[:3]
    players2 = sorted(analysis2.players, key=lambda x: x.rating, reverse=True)[:3]
    
    for i in range(3):
        p1 = players1[i] if i < len(players1) else None
        p2 = players2[i] if i < len(players2) else None
        
        p1_text = f"{p1.name} ({p1.rating:.2f})" if p1 else ""
        p2_text = f"{p2.name} ({p2.rating:.2f})" if p2 else ""
        
        print(f"| {i+1:<8} | {p1_text:<42} | {p2_text:<42} |")
    
    print("+" + "-" * 98 + "+")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
    print(f"\nüó∫Ô∏è  ‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á:")
    print("+" + "-" * 98 + "+")
    print(f"| {'‡∏•‡∏≥‡∏î‡∏±‡∏ö':<8} | {team1 + ' Maps':<42} | {team2 + ' Maps':<42} |")
    print("+" + "-" * 98 + "+")
    
    maps1 = sorted(analysis1.map_pool, key=lambda x: x.win_rate, reverse=True)[:3]
    maps2 = sorted(analysis2.map_pool, key=lambda x: x.win_rate, reverse=True)[:3]
    
    for i in range(3):
        m1 = maps1[i] if i < len(maps1) else None
        m2 = maps2[i] if i < len(maps2) else None
        
        m1_text = f"{m1.map_name} ({m1.win_rate:.1f}%)" if m1 else ""
        m2_text = f"{m2.map_name} ({m2.win_rate:.1f}%)" if m2 else ""
        
        print(f"| {i+1:<8} | {m1_text:<42} | {m2_text:<42} |")
    
    print("+" + "-" * 98 + "+")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á-‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô
    print(f"\n‚úÖ ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á vs ‚ùå ‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô:")
    print("+" + "-" * 98 + "+")
    print(f"| {'‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó':<12} | {team1:<42} | {team2:<42} |")
    print("+" + "-" * 98 + "+")
    
    for i in range(max(len(analysis1.strengths), len(analysis2.strengths))):
        s1 = analysis1.strengths[i] if i < len(analysis1.strengths) else ""
        s2 = analysis2.strengths[i] if i < len(analysis2.strengths) else ""
        label = "‚úÖ ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á" if i == 0 else ""
        print(f"| {label:<12} | {s1:<42} | {s2:<42} |")
    
    print("+" + "-" * 98 + "+")
    
    for i in range(max(len(analysis1.weaknesses), len(analysis2.weaknesses))):
        w1 = analysis1.weaknesses[i] if i < len(analysis1.weaknesses) else ""
        w2 = analysis2.weaknesses[i] if i < len(analysis2.weaknesses) else ""
        label = "‚ùå ‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô" if i == 0 else ""
        print(f"| {label:<12} | {w1:<42} | {w2:<42} |")
    
    print("+" + "-" * 98 + "+")

def print_betting_opportunities(opportunities, team1: str, team2: str):
    """‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô"""
    
    print(f"\nüí∞ ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
    print("=" * 100)
    
    if not opportunities:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")
        return
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    best_opportunity = max(opportunities, key=lambda x: x.expected_value)
    print(f"üèÜ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {best_opportunity.selection} @{best_opportunity.odds}")
    print(f"üíé Expected Value: {best_opportunity.expected_value:.1%} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {best_opportunity.risk_level}")
    print(f"üí∞ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô: {best_opportunity.stake_recommendation:.1%} ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô")
    
    print(f"\nüéØ ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(opportunities)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™
    confidence_emoji = {"HIGH": "üî•", "MEDIUM": "‚ö°", "LOW": "üí°"}
    risk_emoji = {"HIGH": "üî¥", "MEDIUM": "üü°", "LOW": "üü¢"}
    
    for i, opp in enumerate(opportunities, 1):
        print(f"\n‚îå‚îÄ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö {i}: {opp.selection} ‚îÄ{'-' * (70 - len(opp.selection))}‚îê")
        print(f"‚îÇ üíµ ‡∏£‡∏≤‡∏Ñ‡∏≤: {opp.odds:<10} ‚îÇ üìä EV: {opp.expected_value:.1%} ‚îÇ {confidence_emoji[opp.confidence_level]} {opp.confidence_level} ‚îÇ {risk_emoji[opp.risk_level]} {opp.risk_level} ‚îÇ")
        print(f"‚îÇ üí∞ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô: {opp.stake_recommendation:.1%} ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô {'':>35} ‚îÇ")
        print(f"‚îÇ {'':>78} ‚îÇ")
        print(f"‚îÇ üß† ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å: {'':>60} ‚îÇ")
        
        # ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        reasoning_parts = opp.detailed_reasoning.split(" | ")
        for j, part in enumerate(reasoning_parts[:4], 1):
            if len(part) > 75:
                part = part[:72] + "..."
            print(f"‚îÇ {j}. {part:<75} ‚îÇ")
        
        print("‚îî" + "‚îÄ" * 78 + "‚îò")

def print_match_prediction(prediction, team1: str, team2: str):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏°‡∏ï‡∏ä‡πå"""
    
    print(f"\nüéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏°‡∏ï‡∏ä‡πå")
    print("=" * 100)
    print(f"üèÜ ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {prediction.predicted_winner}")
    print(f"üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: {prediction.confidence:.1%}")
    
    print(f"\nüîë ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏ï‡∏≤:")
    for i, reason in enumerate(prediction.reasoning[:3], 1):
        print(f"   {i}. {reason}")

async def main():
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 3 ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏´‡∏•‡∏±‡∏Å BLAST Open London 2025"""
    
    logger = setup_logger("triple_match_analysis")
    
    try:
        print_header()
        
        # ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà 1: Virtus.pro vs GamerLegion
        print_match_header(1, "Virtus.pro", "GamerLegion", "20:30 ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (1:30 PM BST)")
        match1_result = await analyze_match_comprehensive("Virtus.pro", "GamerLegion", "20:30 ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢")
        
        # ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà 2: ECSTATIC vs FaZe
        print_match_header(2, "ECSTATIC", "FaZe", "23:00 ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (4:00 PM BST)")
        match2_result = await analyze_match_comprehensive("ECSTATIC", "FaZe", "23:00 ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢", "FaZe")
        
        # ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà 3: NAVI vs Fnatic
        print_match_header(3, "NAVI", "Fnatic", "01:30 ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (6:30 PM BST)")
        match3_result = await analyze_match_comprehensive("NAVI", "Fnatic", "01:30 ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢", "NAVI")
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°
        print(f"\n" + "=" * 100)
        print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á 3 ‡πÅ‡∏°‡∏ï‡∏ä‡πå")
        print("=" * 100)
        
        print("üèÜ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
        print("   1. üî• Virtus.pro vs GamerLegion - ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏™‡∏°‡∏î‡∏∏‡∏•, ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô handicap ‡∏î‡∏µ")
        print("   2. üéØ ECSTATIC vs FaZe - jcobbb debut, FaZe ‡πÄ‡∏ï‡πá‡∏á‡πÅ‡∏ï‡πà ECSTATIC ‡∏°‡∏µ upset potential")
        print("   3. ‚ö° NAVI vs Fnatic - NAVI ‡∏Ñ‡∏ß‡∏£‡∏ä‡∏ô‡∏∞ ‡πÅ‡∏ï‡πà Fnatic ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå")
        
        print("\nüí∞ ‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
        print("   ü•á Virtus.pro vs GamerLegion: ‡∏î‡∏π handicap ‡πÅ‡∏•‡∏∞ total maps")
        print("   ü•à ECSTATIC upset vs FaZe: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ ‡∏´‡∏≤‡∏Å ECSTATIC ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ")
        print("   ü•â NAVI -1.5 vs Fnatic: ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÅ‡∏ï‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≤‡∏à‡∏ï‡πà‡∏≥")
        
        print("\nüéØ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏£‡∏ß‡∏°:")
        print("   ‚Ä¢ ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô 3 ‡∏™‡πà‡∏ß‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 3 ‡πÅ‡∏°‡∏ï‡∏ä‡πå")
        print("   ‚Ä¢ ‡πÄ‡∏ô‡πâ‡∏ô handicap ‡πÅ‡∏•‡∏∞ total maps ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ match winner")
        print("   ‚Ä¢ ‡∏£‡∏∞‡∏ß‡∏±‡∏á upset ‡πÉ‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå ECSTATIC vs FaZe")
        print("   ‚Ä¢ NAVI vs Fnatic ‡∏≠‡∏≤‡∏à‡∏à‡∏ö‡πÄ‡∏£‡πá‡∏ß (Under maps)")
        
        print(f"\n‚ö° Created by KoJao - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå CS2 ‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥")
        print("=" * 100)
        
    except KeyboardInterrupt:
        print("\n\n[‡∏´‡∏¢‡∏∏‡∏î] ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        print(f"\n[‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡πÉ‡∏ô main: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
