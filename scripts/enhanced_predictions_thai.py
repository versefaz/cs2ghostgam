#!/usr/bin/env python3
"""
Enhanced Predictions Thai - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
Created by KoJao
"""

import os
import sys
import asyncio
import json
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional

# Fix Windows console encoding
if sys.platform.startswith('win'):
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.enhanced_team_analyzer import get_enhanced_analyzer
from core.deep_betting_analyzer import get_deep_betting_analyzer
from app.utils.logger import setup_logger


def print_header():
    """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print("\n" + "=" * 90)
    print("üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå CS2 ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å - ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û")
    print(f"üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {current_time}")
    print("‚ö° Created by KoJao - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå CS2 ‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥")
    print("=" * 90)


def print_team_analysis(team_name: str, analysis, is_favorite: bool = False):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å"""
    
    status = "üèÜ ‡∏ó‡∏µ‡∏°‡πÄ‡∏ï‡πá‡∏á" if is_favorite else "üéØ ‡∏ó‡∏µ‡∏°‡∏£‡∏≠‡∏á"
    print(f"\n+-- {status} {team_name} (‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö {analysis.current_ranking}) {'-' * (60 - len(team_name))}+")
    
    # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    form_emoji = {"excellent": "üî•", "good": "‚úÖ", "average": "‚ö°", "poor": "‚ùå"}
    print(f"| üìà ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {form_emoji[analysis.recent_form]} {analysis.recent_form.upper()} (‡∏ä‡∏ô‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô {analysis.win_streak} ‡πÅ‡∏°‡∏ï‡∏ä‡πå) {'':>10} |")
    print(f"| üéÆ ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô: {analysis.tactical_style:<50} |")
    
    # ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏≤‡∏ß‡πÄ‡∏î‡πà‡∏ô
    print(f"| {'':>80} |")
    print(f"| üåü ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏≤‡∏ß‡πÄ‡∏î‡πà‡∏ô: {'':>58} |")
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≤‡∏° rating
    sorted_players = sorted(analysis.players, key=lambda p: p.rating, reverse=True)
    
    for i, player in enumerate(sorted_players[:3], 1):
        form_status = {"excellent": "üî•", "good": "‚úÖ", "average": "‚ö°", "poor": "‚ùå"}[player.recent_form]
        print(f"| {i}. {player.name:<12} Rating: {player.rating:<5} K/D: {player.kd_ratio:<5} {form_status} {player.recent_form:<8} |")
        print(f"|    ADR: {player.adr:<5} KAST: {player.kast:<5}% Clutch: {player.clutch_success_rate:<5}% {'':>20} |")
    
    # ‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏á
    print(f"| {'':>80} |")
    print(f"| üó∫Ô∏è  ‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {'':>56} |")
    
    best_maps = sorted(analysis.map_pool, key=lambda m: m.win_rate, reverse=True)[:3]
    for i, map_stat in enumerate(best_maps, 1):
        recent_form = "".join(map_stat.recent_performance[-3:])
        print(f"| {i}. {map_stat.map_name:<10} Win Rate: {map_stat.win_rate:<5.1f}% Form: {recent_form:<8} {'':>25} |")
        print(f"|    CT: {map_stat.ct_win_rate:<5.1f}% T: {map_stat.t_win_rate:<5.1f}% Pistol: {map_stat.pistol_round_win_rate:<5.1f}% {'':>18} |")
    
    # ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á-‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô
    print(f"| {'':>80} |")
    print(f"| ‚úÖ ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á: {'':>66} |")
    for strength in analysis.strengths[:2]:
        print(f"|    ‚Ä¢ {strength:<74} |")
    
    if analysis.weaknesses:
        print(f"| ‚ùå ‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô: {'':>66} |")
        for weakness in analysis.weaknesses[:2]:
            print(f"|    ‚Ä¢ {weakness:<74} |")
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    print(f"| {'':>80} |")
    print(f"| üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: {'':>62} |")
    print(f"|    ‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Comeback: {analysis.comeback_ability:<5.1f}% {'':>35} |")
    print(f"|    ‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡πÅ‡∏£‡∏á‡∏Å‡∏î‡∏î‡∏±‡∏ô: {analysis.pressure_performance:<5.1f}% {'':>28} |")
    print(f"|    ‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {analysis.avg_match_duration:<5.1f} ‡∏ô‡∏≤‡∏ó‡∏µ {'':>30} |")
    
    print(f"+{'-' * 82}+")


def print_betting_analysis(opportunities: List, team1: str, team2: str):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å"""
    
    print(f"\n" + "=" * 90)
    print("üí∞ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î")
    print("=" * 90)
    
    if not opportunities:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")
        return
    
    print(f"üéØ ‡∏û‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à {len(opportunities)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
    print()
    
    for i, opp in enumerate(opportunities, 1):
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
        confidence_emoji = {
            "HIGH": "üî•", "VERY_HIGH": "üíé", 
            "MEDIUM": "‚ö°", "LOW": "‚ö†Ô∏è", "VERY_LOW": "‚ùå"
        }
        
        risk_emoji = {"LOW": "üü¢", "MEDIUM": "üü°", "HIGH": "üî¥"}
        
        print(f"‚îå‚îÄ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö {i}: {opp.selection} ‚îÄ{'-' * (60 - len(opp.selection))}‚îê")
        print(f"‚îÇ üíµ ‡∏£‡∏≤‡∏Ñ‡∏≤: {opp.odds:<8} ‚îÇ üìä Expected Value: {opp.expected_value:.1%} {'':>8} ‚îÇ")
        print(f"‚îÇ {confidence_emoji[opp.confidence_level]} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {opp.confidence_level:<12} ‚îÇ {risk_emoji[opp.risk_level]} ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {opp.risk_level:<8} ‚îÇ")
        print(f"‚îÇ üí∞ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô: {opp.stake_recommendation:.1%} ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô {'':>25} ‚îÇ")
        print(f"‚îÇ {'':>70} ‚îÇ")
        print(f"‚îÇ üß† ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å: {'':>52} ‚îÇ")
        
        # ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        reasoning_parts = opp.detailed_reasoning.split(" | ")
        for part in reasoning_parts[:3]:
            if len(part) > 65:
                part = part[:62] + "..."
            print(f"‚îÇ    ‚Ä¢ {part:<63} ‚îÇ")
        
        print(f"‚îÇ {'':>70} ‚îÇ")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô
        if opp.supporting_stats:
            print(f"‚îÇ üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô: {'':>52} ‚îÇ")
            if 'star_player' in opp.supporting_stats:
                print(f"‚îÇ    ‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏≤‡∏ß‡πÄ‡∏î‡πà‡∏ô: {opp.supporting_stats['star_player']:<45} ‚îÇ")
            if 'avg_rating' in opp.supporting_stats:
                print(f"‚îÇ    ‚Ä¢ Rating ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {opp.supporting_stats['avg_rating']:.2f}<{'':<43} ‚îÇ")
        
        print(f"‚îî{'‚îÄ' * 70}‚îò")
        print()
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    print("üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô:")
    high_confidence_bets = [opp for opp in opportunities if opp.confidence_level in ["HIGH", "VERY_HIGH"]]
    
    if high_confidence_bets:
        print(f"   ‚úÖ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á {len(high_confidence_bets)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        total_stake = sum(opp.stake_recommendation for opp in high_confidence_bets[:3])
        print(f"   üí∞ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° {total_stake:.1%} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å")
    else:
        print("   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")
    
    print(f"   ‚ö†Ô∏è  ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")


async def analyze_vitality_vs_m80():
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏ï‡∏ä‡πå Vitality vs M80 ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å"""
    
    print_header()
    
    print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏ï‡∏ä‡πå: Team Vitality vs M80")
    print("üìä ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å HLTV ‡πÅ‡∏•‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô...")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    team_analyzer = get_enhanced_analyzer()
    betting_analyzer = get_deep_betting_analyzer()
    
    try:
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏°
        print("\n‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°...")
        vitality_analysis = await team_analyzer.analyze_team("Vitality")
        m80_analysis = await team_analyzer.analyze_team("M80")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏°
        print_team_analysis("Team Vitality", vitality_analysis, is_favorite=True)
        print_team_analysis("M80", m80_analysis, is_favorite=False)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
        print("\n‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô...")
        match_analysis = await betting_analyzer.analyze_match_deep("Vitality", "M80")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
        print_betting_analysis(match_analysis["betting_opportunities"], "Vitality", "M80")
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        print("\n" + "=" * 90)
        print("üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏°‡∏ï‡∏ä‡πå")
        print("=" * 90)
        
        predicted_winner = match_analysis["predicted_winner"]
        win_prob = match_analysis["win_probability"]
        
        print(f"üèÜ ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {predicted_winner}")
        print(f"üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: {win_prob:.1%}")
        print()
        
        print("üîë ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏ï‡∏≤:")
        for i, factor in enumerate(match_analysis["key_factors"], 1):
            print(f"   {i}. {factor}")
        
        print()
        print("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô:")
        print("   ‚Ä¢ Vitality ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°‡πÄ‡∏ï‡πá‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏°‡∏≤‡∏Å ‡πÅ‡∏ï‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å")
        print("   ‚Ä¢ M80 ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ô‡πâ‡∏≠‡∏¢ ‡πÅ‡∏ï‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î upset ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏´‡∏≤‡∏®‡∏≤‡∏•")
        print("   ‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡∏π handicap ‡πÅ‡∏•‡∏∞ total maps ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ match winner")
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        print("\n" + "=" * 90)
        print("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î")
        print("=" * 90)
        print("üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:")
        print("   ‚Ä¢ Vitality ‡∏ä‡∏ô‡∏∞: 1.01 (99% implied probability)")
        print("   ‚Ä¢ M80 ‡∏ä‡∏ô‡∏∞: 15.28 (6.5% implied probability)")
        print("   ‚Ä¢ Vitality -1.5: 1.19 (84% implied probability)")
        print("   ‚Ä¢ M80 +1.5: 4.43 (23% implied probability)")
        print("   ‚Ä¢ Over 2.5 maps: 4.74 (21% implied probability)")
        print("   ‚Ä¢ Under 2.5 maps: 1.17 (85% implied probability)")
        
        print("\n‚ö° Created by KoJao - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå CS2 ‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥")
        print("=" * 90)
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        logging.error(f"Error in analysis: {e}")


async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    logger = setup_logger("enhanced_predictions_thai")
    
    try:
        await analyze_vitality_vs_m80()
        
    except KeyboardInterrupt:
        print("\n\n[‡∏´‡∏¢‡∏∏‡∏î] ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        print(f"\n[‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡πÉ‡∏ô main: {e}")
        raise


if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå CS2 ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å - Created by KoJao")
    asyncio.run(main())
