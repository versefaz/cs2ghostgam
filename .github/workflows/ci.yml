name: CS2 Betting System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy pytest
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Format check with black
        run: black --check .
      - name: Import sort check
        run: isort --check-only .
      - name: Type check with mypy
        run: mypy . --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: example
          POSTGRES_DB: cs2_betting_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-mock
      - name: Run unit tests
        env:
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://postgres:example@localhost:5432/cs2_betting_test
        run: |
          pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html
      - name: Run integration tests
        env:
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://postgres:example@localhost:5432/cs2_betting_test
        run: |
          pytest tests/integration/ -v --cov=. --cov-append --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      - name: Security check with bandit
        run: bandit -r . -f json -o bandit-report.json || true
      - name: Safety check
        run: safety check --json --output safety-report.json || true
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    strategy:
      matrix:
        service: 
          - api-gateway
          - selenium-chrome
          - prediction-tracker
          - signal-generator
          - risk-manager
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Update docker-compose with new image tags
          sed -i "s/:latest/:${{ github.sha }}/g" docker-compose.yml
          # Deploy using docker-compose
          docker-compose -f docker-compose.yml up -d
      - name: Run smoke tests
        run: |
          sleep 30  # Wait for services to start
          python scripts/e2e_smoke_test.py --env=staging
      - name: Notify deployment
        if: always()
        run: |
          curl -X POST "${{ secrets.DISCORD_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "ðŸš€ Staging Deployment",
                "description": "CS2 Betting System deployed to staging",
                "color": 3066993,
                "fields": [
                  {"name": "Commit", "value": "${{ github.sha }}", "inline": true},
                  {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                  {"name": "Status", "value": "${{ job.status }}", "inline": true}
                ]
              }]
            }'

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
      - name: Deploy to Kubernetes
        run: |
          # Update image tags in k8s manifests
          find infra/k8s/production -name "*.yaml" -exec sed -i "s/:latest/:${{ github.sha }}/g" {} \;
          # Apply manifests
          kubectl apply -f infra/k8s/production/
          # Wait for rollout
          kubectl rollout status deployment/api-gateway -n cs2-betting
          kubectl rollout status deployment/prediction-tracker -n cs2-betting
          kubectl rollout status deployment/scraper -n cs2-betting
      - name: Run production smoke tests
        run: |
          sleep 60  # Wait for services to be ready
          python scripts/e2e_smoke_test.py --env=production
      - name: Notify production deployment
        if: always()
        run: |
          curl -X POST "${{ secrets.DISCORD_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "ðŸŽ¯ Production Deployment",
                "description": "CS2 Betting System deployed to production",
                "color": 15844367,
                "fields": [
                  {"name": "Commit", "value": "${{ github.sha }}", "inline": true},
                  {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                  {"name": "Status", "value": "${{ job.status }}", "inline": true}
                ]
              }]
            }'
