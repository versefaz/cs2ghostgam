#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Automated CS2 Betting Intelligence Pipeline
‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô CS2 ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
"""

import sys
import asyncio
import json
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, asdict

# Fix Windows console encoding
if sys.platform == "win32":
    import codecs
    try:
        sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
        sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())
    except AttributeError:
        # Already detached or not available
        pass

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import
sys.path.append(str(Path(__file__).parent.parent))

from app.scrapers.enhanced_hltv_scraper import EnhancedHLTVScraper
from core.universal_match_analyzer import UniversalMatchAnalyzer, AnalysisDepth
from core.enhanced_team_analyzer import EnhancedTeamAnalyzer
from core.deep_betting_analyzer import DeepBettingAnalyzer

@dataclass
class MatchInfo:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡∏ï‡∏ä‡πå"""
    team1: str
    team2: str
    time: str
    event: str
    importance: float
    tournament_tier: str
    match_id: str

@dataclass
class OddsData:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á"""
    bookmaker: str
    team1_odds: float
    team2_odds: float
    markets: Dict[str, Any]
    timestamp: datetime

@dataclass
class BettingRecommendation:
    """‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô"""
    match_id: str
    primary_bet: Dict[str, Any]
    backup_bets: List[Dict[str, Any]]
    confidence_level: float
    reasoning: List[str]
    risk_level: str
    kelly_percentage: float
    expected_value: float

class AutomatedBettingPipeline:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô CS2 ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    
    def __init__(self):
        self.match_analyzer = UniversalMatchAnalyzer()
        self.team_analyzer = EnhancedTeamAnalyzer()
        self.betting_analyzer = DeepBettingAnalyzer()
        
        # ‡∏ó‡∏±‡∏ß‡∏£‡πå‡∏ô‡∏≤‡πÄ‡∏°‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        self.major_tournaments = {
            "BLAST": {"tier": "S", "importance": 0.9},
            "IEM": {"tier": "S", "importance": 0.9},
            "ESL Pro League": {"tier": "A", "importance": 0.8},
            "EPICENTER": {"tier": "A", "importance": 0.8},
            "DreamHack": {"tier": "B", "importance": 0.7},
            "Flashpoint": {"tier": "B", "importance": 0.7},
            "WePlay": {"tier": "B", "importance": 0.6}
        }
        
        # ‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        self.bookmakers = [
            "Pinnacle", "Bet365", "1xBet", "GG.BET", 
            "Unikrn", "Rivalry", "Betway", "888sport"
        ]

    async def run_full_pipeline(self) -> List[BettingRecommendation]:
        """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
        
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Automated CS2 Betting Intelligence Pipeline")
        print("=" * 80)
        
        # Step 1: ‡∏î‡∏∂‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏à‡∏≤‡∏Å HLTV
        matches = await self._scrape_upcoming_matches()
        print(f"üìä ‡∏û‡∏ö‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(matches)} ‡∏Ñ‡∏π‡πà")
        
        # Step 2: ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        important_matches = self._filter_important_matches(matches)
        print(f"üéØ ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {len(important_matches)} ‡∏Ñ‡∏π‡πà")
        
        # Step 3: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏°‡∏ï‡∏ä‡πå
        odds_data = await self._scrape_odds_for_matches(important_matches)
        print(f"üí∞ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(odds_data)} ‡πÅ‡∏°‡∏ï‡∏ä‡πå")
        
        # Step 4: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å
        recommendations = []
        for match in important_matches:
            print(f"\nüî¨ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {match.team1} vs {match.team2}")
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏°‡∏ï‡∏ä‡πå
            analysis = await self.match_analyzer.analyze_any_match(
                match.team1, match.team2, AnalysisDepth.WORLD_CLASS
            )
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
            recommendation = await self._generate_betting_recommendation(
                match, analysis, odds_data.get(match.match_id, [])
            )
            
            if recommendation:
                recommendations.append(recommendation)
        
        # Step 5: ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        await self._display_final_recommendations(recommendations)
        
        return recommendations

    async def _scrape_upcoming_matches(self) -> List[MatchInfo]:
        """‡∏î‡∏∂‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≤‡∏Å HLTV"""
        
        print("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏à‡∏≤‡∏Å HLTV...")
        
        try:
            async with EnhancedHLTVScraper() as scraper:
                raw_matches = await scraper.get_upcoming_matches(limit=50)
                
                matches = []
                for i, match in enumerate(raw_matches):
                    match_info = MatchInfo(
                        team1=match.get("team1", "TBD"),
                        team2=match.get("team2", "TBD"),
                        time=match.get("time", "TBD"),
                        event=match.get("event", "Unknown"),
                        importance=self._calculate_match_importance(match.get("event", "")),
                        tournament_tier=self._get_tournament_tier(match.get("event", "")),
                        match_id=f"match_{i}_{datetime.now().strftime('%Y%m%d')}"
                    )
                    matches.append(match_info)
                
                return matches
                
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
            return self._get_sample_matches()

    def _filter_important_matches(self, matches: List[MatchInfo]) -> List[MatchInfo]:
        """‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"""
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
        important_matches = []
        
        for match in matches:
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡∏ß‡∏£‡πå‡∏ô‡∏≤‡πÄ‡∏°‡∏ô‡∏ó‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            if match.importance >= 0.6:
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà TBD
                if match.team1 != "TBD" and match.team2 != "TBD":
                    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÉ‡∏Å‡∏•‡πâ
                    important_matches.append(match)
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)
        return important_matches[:10]

    async def _scrape_odds_for_matches(self, matches: List[MatchInfo]) -> Dict[str, List[OddsData]]:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏°‡∏ï‡∏ä‡πå"""
        
        print("üí∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô...")
        
        odds_data = {}
        
        for match in matches:
            match_odds = []
            
            # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ
            for bookmaker in self.bookmakers[:4]:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
                odds = self._simulate_odds_scraping(match, bookmaker)
                if odds:
                    match_odds.append(odds)
            
            if match_odds:
                odds_data[match.match_id] = match_odds
        
        return odds_data

    async def _generate_betting_recommendation(self, match: MatchInfo, 
                                             analysis: Any, 
                                             odds: List[OddsData]) -> Optional[BettingRecommendation]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        
        if not odds:
            return None
        
        # ‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        best_odds = self._find_best_odds(odds)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Expected Value
        expected_value = self._calculate_expected_value(analysis, best_odds)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏•‡∏±‡∏Å
        primary_bet = self._create_primary_bet(match, analysis, best_odds, expected_value)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏£‡∏≠‡∏á
        backup_bets = self._create_backup_bets(match, analysis, odds)
        
        # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        risk_level = self._assess_risk_level(analysis, match.importance)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Kelly Criterion
        kelly_percentage = self._calculate_kelly_criterion(expected_value, best_odds)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
        reasoning = self._generate_reasoning(match, analysis, primary_bet)
        
        return BettingRecommendation(
            match_id=match.match_id,
            primary_bet=primary_bet,
            backup_bets=backup_bets,
            confidence_level=analysis.prediction_confidence,
            reasoning=reasoning,
            risk_level=risk_level,
            kelly_percentage=kelly_percentage,
            expected_value=expected_value
        )

    async def _display_final_recommendations(self, recommendations: List[BettingRecommendation]):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"""
        
        print("\n" + "=" * 80)
        print("üéØ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô CS2 - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏•‡∏Å")
        print("=" * 80)
        
        # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° Expected Value
        sorted_recommendations = sorted(
            recommendations, 
            key=lambda x: x.expected_value, 
            reverse=True
        )
        
        for i, rec in enumerate(sorted_recommendations[:5], 1):  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
            print(f"\nüèÜ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö {i}")
            print(f"üìä ‡πÅ‡∏°‡∏ï‡∏ä‡πå: {rec.primary_bet.get('match', 'Unknown')}")
            print(f"üéØ ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: {rec.primary_bet.get('type', 'Unknown')} - {rec.primary_bet.get('selection', 'Unknown')}")
            print(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {rec.primary_bet.get('odds', 0):.2f}")
            print(f"üìà Expected Value: {rec.expected_value:.3f}")
            print(f"üé≤ Kelly %: {rec.kelly_percentage:.2f}%")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
            risk_emoji = "üî¥" if rec.risk_level == "high" else "üü°" if rec.risk_level == "medium" else "üü¢"
            print(f"{risk_emoji} ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {rec.risk_level}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
            print("üí° ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:")
            for reason in rec.reasoning[:3]:  # ‡πÅ‡∏™‡∏î‡∏á 3 ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÅ‡∏£‡∏Å
                print(f"   ‚Ä¢ {reason}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏£‡∏≠‡∏á
            if rec.backup_bets:
                print("üîÑ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏£‡∏≠‡∏á:")
                for backup in rec.backup_bets[:2]:  # ‡πÅ‡∏™‡∏î‡∏á 2 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏£‡∏Å
                    print(f"   ‚Ä¢ {backup.get('type', 'Unknown')}: {backup.get('selection', 'Unknown')} @ {backup.get('odds', 0):.2f}")

    # Helper methods
    def _calculate_match_importance(self, event_name: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå"""
        for tournament, info in self.major_tournaments.items():
            if tournament.lower() in event_name.lower():
                return info["importance"]
        return 0.5  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

    def _get_tournament_tier(self, event_name: str) -> str:
        """‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏±‡∏ß‡∏£‡πå‡∏ô‡∏≤‡πÄ‡∏°‡∏ô‡∏ó‡πå"""
        for tournament, info in self.major_tournaments.items():
            if tournament.lower() in event_name.lower():
                return info["tier"]
        return "C"

    def _simulate_odds_scraping(self, match: MatchInfo, bookmaker: str) -> Optional[OddsData]:
        """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á (‡∏à‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ scrape ‡∏à‡∏£‡∏¥‡∏á)"""
        import random
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
        base_odds = random.uniform(1.5, 3.0)
        team1_odds = round(base_odds, 2)
        team2_odds = round(4.0 - base_odds + random.uniform(-0.3, 0.3), 2)
        
        return OddsData(
            bookmaker=bookmaker,
            team1_odds=team1_odds,
            team2_odds=team2_odds,
            markets={
                "match_winner": {"team1": team1_odds, "team2": team2_odds},
                "handicap": {"team1_+1.5": team1_odds * 0.6, "team2_-1.5": team2_odds * 1.4},
                "total_maps": {"over_2.5": 1.8, "under_2.5": 2.0}
            },
            timestamp=datetime.now()
        )

    def _find_best_odds(self, odds: List[OddsData]) -> Dict[str, Any]:
        """‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
        if not odds:
            return {}
        
        best_team1 = max(odds, key=lambda x: x.team1_odds)
        best_team2 = max(odds, key=lambda x: x.team2_odds)
        
        return {
            "team1": {"odds": best_team1.team1_odds, "bookmaker": best_team1.bookmaker},
            "team2": {"odds": best_team2.team2_odds, "bookmaker": best_team2.bookmaker}
        }

    def _calculate_expected_value(self, analysis: Any, best_odds: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Expected Value"""
        # ‡πÉ‡∏ä‡πâ confidence ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
        confidence = analysis.prediction_confidence
        
        # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ä‡∏ô‡∏∞‡∏ï‡∏≤‡∏° confidence
        recommended_team = analysis.betting_recommendations.get("recommended_team", "")
        
        if "team1" in recommended_team.lower() or recommended_team in best_odds.get("team1", {}).get("bookmaker", ""):
            prob_win = confidence
            odds = best_odds.get("team1", {}).get("odds", 2.0)
        else:
            prob_win = confidence
            odds = best_odds.get("team2", {}).get("odds", 2.0)
        
        # EV = (probability √ó odds) - 1
        return (prob_win * odds) - 1

    def _calculate_kelly_criterion(self, expected_value: float, best_odds: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Kelly Criterion"""
        if expected_value <= 0:
            return 0
        
        # Kelly % = (bp - q) / b
        # ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà b = odds - 1, p = probability, q = 1 - p
        avg_odds = (best_odds.get("team1", {}).get("odds", 2.0) + 
                   best_odds.get("team2", {}).get("odds", 2.0)) / 2
        
        b = avg_odds - 1
        p = 0.6  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
        q = 1 - p
        
        kelly = ((b * p) - q) / b
        return max(0, min(kelly * 100, 5))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5%

    def _create_primary_bet(self, match: MatchInfo, analysis: Any, 
                          best_odds: Dict, expected_value: float) -> Dict[str, Any]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
        
        recommended_team = analysis.betting_recommendations.get("recommended_team", "")
        
        if expected_value > 0.1:  # ‡∏°‡∏µ EV ‡∏ó‡∏µ‡πà‡∏î‡∏µ
            if "team1" in recommended_team.lower() or match.team1 in recommended_team:
                return {
                    "match": f"{match.team1} vs {match.team2}",
                    "type": "Match Winner",
                    "selection": match.team1,
                    "odds": best_odds.get("team1", {}).get("odds", 2.0),
                    "bookmaker": best_odds.get("team1", {}).get("bookmaker", "Unknown")
                }
            else:
                return {
                    "match": f"{match.team1} vs {match.team2}",
                    "type": "Match Winner", 
                    "selection": match.team2,
                    "odds": best_odds.get("team2", {}).get("odds", 2.0),
                    "bookmaker": best_odds.get("team2", {}).get("bookmaker", "Unknown")
                }
        else:
            # ‡∏ñ‡πâ‡∏≤ EV ‡πÑ‡∏°‡πà‡∏î‡∏µ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏•‡∏≤‡∏î‡∏£‡∏≠‡∏á
            return {
                "match": f"{match.team1} vs {match.team2}",
                "type": "Total Maps",
                "selection": "Over 2.5",
                "odds": 1.85,
                "bookmaker": "Average"
            }

    def _create_backup_bets(self, match: MatchInfo, analysis: Any, 
                          odds: List[OddsData]) -> List[Dict[str, Any]]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á"""
        
        backups = []
        
        # Handicap bet
        backups.append({
            "type": "Handicap",
            "selection": f"{match.team1} +1.5",
            "odds": 1.6,
            "reason": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏π‡∏á"
        })
        
        # Total maps
        backups.append({
            "type": "Total Maps",
            "selection": "Over 2.5",
            "odds": 1.8,
            "reason": "‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÅ‡∏Ç‡πà‡∏á‡∏ô‡∏≤‡∏ô"
        })
        
        # First map winner
        backups.append({
            "type": "First Map Winner",
            "selection": match.team1,
            "odds": 2.1,
            "reason": "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÅ‡∏£‡∏á‡∏°‡∏±‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö"
        })
        
        return backups

    def _assess_risk_level(self, analysis: Any, match_importance: float) -> str:
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"""
        
        confidence = analysis.prediction_confidence
        
        if confidence > 0.8 and match_importance > 0.8:
            return "low"
        elif confidence > 0.6 and match_importance > 0.6:
            return "medium"
        else:
            return "high"

    def _generate_reasoning(self, match: MatchInfo, analysis: Any, 
                          primary_bet: Dict) -> List[str]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô"""
        
        reasons = []
        
        # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        if analysis.prediction_confidence > 0.8:
            reasons.append(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á ({analysis.prediction_confidence:.1%}) ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")
        
        # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå
        if match.importance > 0.8:
            reasons.append(f"‡∏ó‡∏±‡∏ß‡∏£‡πå‡∏ô‡∏≤‡πÄ‡∏°‡∏ô‡∏ó‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ({match.event}) - ‡∏ó‡∏µ‡∏°‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á")
        
        # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤
        if hasattr(analysis, 'team1_psychology') and hasattr(analysis, 'team2_psychology'):
            if analysis.team1_psychology.confidence_level > analysis.team2_psychology.confidence_level:
                reasons.append(f"{match.team1} ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤")
            else:
                reasons.append(f"{match.team2} ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤")
        
        # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏¢‡∏∏‡∏ó‡∏ò‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
        if hasattr(analysis, 'team1_tactics') and hasattr(analysis, 'team2_tactics'):
            if analysis.team1_tactics.adaptation_ability > 0.7:
                reasons.append(f"{match.team1} ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏™‡∏π‡∏á")
            if analysis.team2_tactics.adaptation_ability > 0.7:
                reasons.append(f"{match.team2} ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏™‡∏π‡∏á")
        
        # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤
        if primary_bet.get("odds", 0) > 2.0:
            reasons.append("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤")
        
        return reasons[:5]  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î 5 ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•

    def _get_sample_matches(self) -> List[MatchInfo]:
        """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å HLTV ‡πÑ‡∏î‡πâ"""
        
        return [
            MatchInfo(
                team1="GamerLegion", team2="Virtus.pro",
                time="20:30", event="BLAST Open London 2025",
                importance=0.9, tournament_tier="S", match_id="sample_1"
            ),
            MatchInfo(
                team1="Natus Vincere", team2="FaZe Clan",
                time="23:00", event="IEM Katowice 2025",
                importance=0.95, tournament_tier="S", match_id="sample_2"
            ),
            MatchInfo(
                team1="Astralis", team2="Vitality",
                time="01:30", event="ESL Pro League",
                importance=0.8, tournament_tier="A", match_id="sample_3"
            )
        ]

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô
async def run_automated_pipeline():
    """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    pipeline = AutomatedBettingPipeline()
    recommendations = await pipeline.run_full_pipeline()
    return recommendations

if __name__ == "__main__":
    asyncio.run(run_automated_pipeline())
