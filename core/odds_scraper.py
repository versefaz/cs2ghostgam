#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Multi-Source Odds Scraper for CS2 Betting
‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡πà‡∏á
"""

import sys
import asyncio
import aiohttp
import json
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
import re
import time
from urllib.parse import urljoin, quote

# Fix Windows console encoding
if sys.platform == "win32":
    import codecs
    try:
        sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
        sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())
    except AttributeError:
        # Already detached or not available
        pass

@dataclass
class BookmakerOdds:
    """‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô"""
    bookmaker: str
    match_id: str
    team1: str
    team2: str
    team1_odds: float
    team2_odds: float
    markets: Dict[str, Any]
    timestamp: datetime
    url: str = ""
    confidence: float = 1.0

@dataclass
class OddsComparison:
    """‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á"""
    match_id: str
    team1: str
    team2: str
    best_team1_odds: BookmakerOdds
    best_team2_odds: BookmakerOdds
    average_team1_odds: float
    average_team2_odds: float
    arbitrage_opportunity: bool
    arbitrage_percentage: float
    value_bets: List[Dict[str, Any]]

class MultiSourceOddsScraper:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á"""
    
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
        }
        
        # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
        self.bookmakers = {
            "pinnacle": {
                "name": "Pinnacle",
                "base_url": "https://www.pinnacle.com",
                "api_endpoint": "/api/v1/odds",
                "priority": 1,
                "reliability": 0.95
            },
            "bet365": {
                "name": "Bet365", 
                "base_url": "https://www.bet365.com",
                "api_endpoint": "/api/odds",
                "priority": 2,
                "reliability": 0.90
            },
            "ggbet": {
                "name": "GG.BET",
                "base_url": "https://gg.bet",
                "api_endpoint": "/api/esports/odds",
                "priority": 3,
                "reliability": 0.85
            },
            "unikrn": {
                "name": "Unikrn",
                "base_url": "https://unikrn.com",
                "api_endpoint": "/api/betting/odds",
                "priority": 4,
                "reliability": 0.80
            },
            "rivalry": {
                "name": "Rivalry",
                "base_url": "https://www.rivalry.com",
                "api_endpoint": "/api/odds",
                "priority": 5,
                "reliability": 0.85
            }
        }

    async def __aenter__(self):
        """Async context manager entry"""
        self.session = aiohttp.ClientSession(
            headers=self.headers,
            timeout=aiohttp.ClientTimeout(total=30)
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        if self.session:
            await self.session.close()

    async def scrape_all_odds(self, matches: List[Dict[str, Any]]) -> Dict[str, List[BookmakerOdds]]:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô"""
        
        print("üí∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡πà‡∏á...")
        
        all_odds = {}
        
        for match in matches:
            match_id = match.get("match_id", f"match_{len(all_odds)}")
            team1 = match.get("team1", "Team1")
            team2 = match.get("team2", "Team2")
            
            print(f"üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: {team1} vs {team2}")
            
            match_odds = []
            
            # ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô
            for bookmaker_key, bookmaker_info in self.bookmakers.items():
                try:
                    odds = await self._scrape_bookmaker_odds(
                        bookmaker_key, bookmaker_info, match
                    )
                    if odds:
                        match_odds.append(odds)
                        print(f"  ‚úÖ {bookmaker_info['name']}: {odds.team1_odds:.2f} / {odds.team2_odds:.2f}")
                    else:
                        print(f"  ‚ùå {bookmaker_info['name']}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                        
                except Exception as e:
                    print(f"  ‚ö†Ô∏è {bookmaker_info['name']}: {str(e)}")
                
                # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å rate limit
                await asyncio.sleep(1)
            
            if match_odds:
                all_odds[match_id] = match_odds
        
        return all_odds

    async def _scrape_bookmaker_odds(self, bookmaker_key: str, 
                                   bookmaker_info: Dict, 
                                   match: Dict) -> Optional[BookmakerOdds]:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏´‡πà‡∏á"""
        
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ API ‡∏´‡∏£‡∏∑‡∏≠ web scraping
        return await self._simulate_odds_scraping(bookmaker_key, bookmaker_info, match)

    async def _simulate_odds_scraping(self, bookmaker_key: str,
                                    bookmaker_info: Dict,
                                    match: Dict) -> Optional[BookmakerOdds]:
        """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ scrape ‡∏à‡∏£‡∏¥‡∏á)"""
        
        import random
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
        if random.random() > bookmaker_info["reliability"]:
            return None
        
        team1 = match.get("team1", "Team1")
        team2 = match.get("team2", "Team2")
        match_id = match.get("match_id", "unknown")
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
        base_prob = random.uniform(0.4, 0.6)  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏° 1 ‡∏ä‡∏ô‡∏∞
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
        team1_odds = round(1 / base_prob, 2)
        team2_odds = round(1 / (1 - base_prob), 2)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° margin ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô (5-10%)
        margin = random.uniform(0.05, 0.10)
        team1_odds = round(team1_odds * (1 - margin), 2)
        team2_odds = round(team2_odds * (1 - margin), 2)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏™‡∏£‡∏¥‡∏°
        markets = self._generate_additional_markets(team1_odds, team2_odds)
        
        return BookmakerOdds(
            bookmaker=bookmaker_info["name"],
            match_id=match_id,
            team1=team1,
            team2=team2,
            team1_odds=team1_odds,
            team2_odds=team2_odds,
            markets=markets,
            timestamp=datetime.now(),
            url=f"{bookmaker_info['base_url']}/esports/cs2",
            confidence=bookmaker_info["reliability"]
        )

    def _generate_additional_markets(self, team1_odds: float, team2_odds: float) -> Dict[str, Any]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°"""
        
        import random
        
        markets = {
            # Handicap markets
            "handicap": {
                f"team1_+1.5": round(team1_odds * random.uniform(0.6, 0.8), 2),
                f"team1_-1.5": round(team1_odds * random.uniform(1.8, 2.5), 2),
                f"team2_+1.5": round(team2_odds * random.uniform(0.6, 0.8), 2),
                f"team2_-1.5": round(team2_odds * random.uniform(1.8, 2.5), 2),
            },
            
            # Total maps
            "total_maps": {
                "over_2.5": round(random.uniform(1.7, 2.2), 2),
                "under_2.5": round(random.uniform(1.6, 2.1), 2),
                "exactly_2": round(random.uniform(2.8, 3.5), 2),
                "exactly_3": round(random.uniform(2.2, 2.8), 2),
            },
            
            # First map winner
            "first_map": {
                "team1": round(team1_odds * random.uniform(0.9, 1.1), 2),
                "team2": round(team2_odds * random.uniform(0.9, 1.1), 2),
            },
            
            # Correct score
            "correct_score": {
                "2-0": round(team1_odds * random.uniform(2.5, 3.5), 2),
                "2-1": round(random.uniform(2.8, 3.8), 2),
                "0-2": round(team2_odds * random.uniform(2.5, 3.5), 2),
                "1-2": round(random.uniform(2.8, 3.8), 2),
            }
        }
        
        return markets

    async def compare_odds(self, all_odds: Dict[str, List[BookmakerOdds]]) -> Dict[str, OddsComparison]:
        """‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏î‡∏µ"""
        
        print("\nüìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô...")
        
        comparisons = {}
        
        for match_id, odds_list in all_odds.items():
            if not odds_list:
                continue
            
            # ‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏µ‡∏°
            best_team1 = max(odds_list, key=lambda x: x.team1_odds)
            best_team2 = max(odds_list, key=lambda x: x.team2_odds)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            avg_team1 = sum(odds.team1_odds for odds in odds_list) / len(odds_list)
            avg_team2 = sum(odds.team2_odds for odds in odds_list) / len(odds_list)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ arbitrage
            arbitrage_opportunity, arbitrage_percentage = self._check_arbitrage(
                best_team1.team1_odds, best_team2.team2_odds
            )
            
            # ‡∏´‡∏≤ value bets
            value_bets = self._find_value_bets(odds_list, avg_team1, avg_team2)
            
            comparison = OddsComparison(
                match_id=match_id,
                team1=odds_list[0].team1,
                team2=odds_list[0].team2,
                best_team1_odds=best_team1,
                best_team2_odds=best_team2,
                average_team1_odds=round(avg_team1, 2),
                average_team2_odds=round(avg_team2, 2),
                arbitrage_opportunity=arbitrage_opportunity,
                arbitrage_percentage=arbitrage_percentage,
                value_bets=value_bets
            )
            
            comparisons[match_id] = comparison
        
        return comparisons

    def _check_arbitrage(self, odds1: float, odds2: float) -> Tuple[bool, float]:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ arbitrage"""
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì implied probability
        implied_prob = (1 / odds1) + (1 / odds2)
        
        # ‡∏ñ‡πâ‡∏≤ implied probability < 1 ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ arbitrage
        if implied_prob < 1.0:
            arbitrage_percentage = ((1 - implied_prob) / implied_prob) * 100
            return True, round(arbitrage_percentage, 2)
        
        return False, 0.0

    def _find_value_bets(self, odds_list: List[BookmakerOdds], 
                        avg_team1: float, avg_team2: float) -> List[Dict[str, Any]]:
        """‡∏´‡∏≤ value bets (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢)"""
        
        value_bets = []
        threshold = 0.05  # 5% ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        
        for odds in odds_list:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡∏° 1
            if odds.team1_odds > avg_team1 * (1 + threshold):
                value_percentage = ((odds.team1_odds - avg_team1) / avg_team1) * 100
                value_bets.append({
                    "bookmaker": odds.bookmaker,
                    "selection": odds.team1,
                    "odds": odds.team1_odds,
                    "average_odds": round(avg_team1, 2),
                    "value_percentage": round(value_percentage, 1),
                    "type": "match_winner"
                })
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡∏° 2
            if odds.team2_odds > avg_team2 * (1 + threshold):
                value_percentage = ((odds.team2_odds - avg_team2) / avg_team2) * 100
                value_bets.append({
                    "bookmaker": odds.bookmaker,
                    "selection": odds.team2,
                    "odds": odds.team2_odds,
                    "average_odds": round(avg_team2, 2),
                    "value_percentage": round(value_percentage, 1),
                    "type": "match_winner"
                })
        
        return value_bets

    async def display_odds_analysis(self, comparisons: Dict[str, OddsComparison]):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á"""
        
        print("\n" + "=" * 80)
        print("üí∞ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô")
        print("=" * 80)
        
        for match_id, comparison in comparisons.items():
            print(f"\nüéØ {comparison.team1} vs {comparison.team2}")
            print("-" * 50)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            print("üèÜ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:")
            print(f"  {comparison.team1}: {comparison.best_team1_odds.team1_odds:.2f} ({comparison.best_team1_odds.bookmaker})")
            print(f"  {comparison.team2}: {comparison.best_team2_odds.team2_odds:.2f} ({comparison.best_team2_odds.bookmaker})")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            print(f"\nüìä ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:")
            print(f"  {comparison.team1}: {comparison.average_team1_odds:.2f}")
            print(f"  {comparison.team2}: {comparison.average_team2_odds:.2f}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ arbitrage
            if comparison.arbitrage_opportunity:
                print(f"\nüé∞ ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ Arbitrage: {comparison.arbitrage_percentage:.2f}%")
                print("  üí° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏Å‡∏≥‡πÑ‡∏£!")
            
            # ‡πÅ‡∏™‡∏î‡∏á value bets
            if comparison.value_bets:
                print(f"\nüíé Value Bets ‡∏û‡∏ö {len(comparison.value_bets)} ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™:")
                for value_bet in comparison.value_bets[:3]:  # ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
                    print(f"  ‚Ä¢ {value_bet['selection']}: {value_bet['odds']:.2f} @ {value_bet['bookmaker']}")
                    print(f"    (‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {value_bet['value_percentage']:.1f}%)")

    async def save_odds_data(self, all_odds: Dict[str, List[BookmakerOdds]], 
                           comparisons: Dict[str, OddsComparison]):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏¥‡∏ö
        odds_file = Path("data") / f"odds_data_{timestamp}.json"
        odds_file.parent.mkdir(exist_ok=True)
        
        odds_data = {}
        for match_id, odds_list in all_odds.items():
            odds_data[match_id] = [asdict(odds) for odds in odds_list]
        
        with open(odds_file, 'w', encoding='utf-8') as f:
            json.dump(odds_data, f, ensure_ascii=False, indent=2, default=str)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
        comparison_file = Path("data") / f"odds_comparison_{timestamp}.json"
        
        comparison_data = {}
        for match_id, comparison in comparisons.items():
            comparison_data[match_id] = asdict(comparison)
        
        with open(comparison_file, 'w', encoding='utf-8') as f:
            json.dump(comparison_data, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß:")
        print(f"  üìÑ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á: {odds_file}")
        print(f"  üìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö: {comparison_file}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async def test_odds_scraper():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á"""
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    sample_matches = [
        {
            "match_id": "test_1",
            "team1": "GamerLegion",
            "team2": "Virtus.pro",
            "event": "BLAST Open London 2025"
        },
        {
            "match_id": "test_2", 
            "team1": "Natus Vincere",
            "team2": "FaZe Clan",
            "event": "IEM Katowice 2025"
        }
    ]
    
    async with MultiSourceOddsScraper() as scraper:
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á
        all_odds = await scraper.scrape_all_odds(sample_matches)
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
        comparisons = await scraper.compare_odds(all_odds)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        await scraper.display_odds_analysis(comparisons)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await scraper.save_odds_data(all_odds, comparisons)

if __name__ == "__main__":
    asyncio.run(test_odds_scraper())
